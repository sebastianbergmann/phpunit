<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.12.0@f90118cdeacd0088e7215e64c0c99ceca819e176">
  <file src="src/Framework/Assert.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$actualElement->childNodes->item($i)]]></code>
      <code><![CDATA[$expectedElement->childNodes->item($i)]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>Attribute</code>
      <code>Attribute</code>
      <code>TraversableContains</code>
      <code>new ArraySubset($subset, $checkForObjectIdentity)</code>
      <code>new Attribute($constraint, $attributeName)</code>
      <code>new TraversableContains(
                    $needle,
                    $checkForObjectIdentity,
                    $checkForNonObjectIdentity
                )</code>
      <code>new TraversableContains(
                $needle,
                $checkForObjectIdentity,
                $checkForNonObjectIdentity
            )</code>
      <code>new TraversableContains($value, $checkForObjectIdentity, $checkForNonObjectIdentity)</code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code>static::assertInternalType(
            $expected,
            static::readAttribute($classOrObject, $attributeName),
            $message
        )</code>
      <code>static::assertNotInternalType(
            $expected,
            static::readAttribute($classOrObject, $attributeName),
            $message
        )</code>
      <code>static::attribute(
            static::equalTo(
                $value,
                $delta,
                $maxDepth,
                $canonicalize,
                $ignoreCase
            ),
            $attributeName
        )</code>
      <code>static::getObjectAttribute(
                $classOrObject,
                $attributeName
            )</code>
      <code>static::getStaticAttribute(
                $classOrObject,
                $attributeName
            )</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($classOrObject, $attributeName)</code>
      <code>static::readAttribute($classOrObject, $attributeName)</code>
      <code>static::readAttribute($classOrObject, $attributeName)</code>
      <code>static::readAttribute($classOrObject, $attributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[!$actual instanceof Countable && !is_iterable($actual)]]></code>
      <code><![CDATA[!$actual instanceof Countable && !is_iterable($actual)]]></code>
      <code><![CDATA[!$expected instanceof Countable && !is_iterable($expected)]]></code>
      <code><![CDATA[!$expected instanceof Countable && !is_iterable($expected)]]></code>
      <code><![CDATA[!$haystack instanceof Countable && !is_iterable($haystack)]]></code>
      <code><![CDATA[!$haystack instanceof Countable && !is_iterable($haystack)]]></code>
      <code>is_int($key) || is_string($key)</code>
      <code>is_int($key) || is_string($key)</code>
      <code>is_object($object)</code>
      <code>is_object($object)</code>
      <code>is_object($object)</code>
      <code>is_string($key)</code>
      <code>is_string($key)</code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$attributeName</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$haystack</code>
      <code>$haystack</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$prefix</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MissingParamType>
    <MissingReturnType>
      <code>getObjectAttribute</code>
      <code>getStaticAttribute</code>
      <code>readAttribute</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code>new IsType($expected)</code>
      <code>new IsType($expected)</code>
      <code>new IsType($type)</code>
      <code>new IsType(IsType::TYPE_ARRAY)</code>
      <code>new IsType(IsType::TYPE_ARRAY)</code>
      <code>new IsType(IsType::TYPE_BOOL)</code>
      <code>new IsType(IsType::TYPE_BOOL)</code>
      <code>new IsType(IsType::TYPE_CALLABLE)</code>
      <code>new IsType(IsType::TYPE_CALLABLE)</code>
      <code>new IsType(IsType::TYPE_FLOAT)</code>
      <code>new IsType(IsType::TYPE_FLOAT)</code>
      <code>new IsType(IsType::TYPE_INT)</code>
      <code>new IsType(IsType::TYPE_INT)</code>
      <code>new IsType(IsType::TYPE_ITERABLE)</code>
      <code>new IsType(IsType::TYPE_ITERABLE)</code>
      <code>new IsType(IsType::TYPE_NUMERIC)</code>
      <code>new IsType(IsType::TYPE_NUMERIC)</code>
      <code>new IsType(IsType::TYPE_OBJECT)</code>
      <code>new IsType(IsType::TYPE_OBJECT)</code>
      <code>new IsType(IsType::TYPE_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_SCALAR)</code>
      <code>new IsType(IsType::TYPE_SCALAR)</code>
      <code>new IsType(IsType::TYPE_STRING)</code>
      <code>new IsType(IsType::TYPE_STRING)</code>
      <code>new TraversableContainsOnly(
                    $type,
                    $isNativeType
                )</code>
      <code>new TraversableContainsOnly(
                $className,
                false
            )</code>
      <code>new TraversableContainsOnly(
                $type,
                $isNativeType
            )</code>
      <code>new TraversableContainsOnly($className, false)</code>
      <code>new TraversableContainsOnly($type)</code>
      <code>self::assertInternalTypeReplacement($expected, false)</code>
      <code>self::assertInternalTypeReplacement($expected, true)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code>$expected</code>
      <code>$expected</code>
      <code>$subset</code>
    </PossiblyInvalidArgument>
    <RedundantCondition>
      <code><![CDATA[assert($step['object'] instanceof TestCase)]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>is_object($classOrObject)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType>
      <code>!$attribute</code>
      <code>!$attribute</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <DeprecatedClass>
      <code>Attribute</code>
      <code>Attribute</code>
      <code>TraversableContains</code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code>Assert::assertArraySubset(...\func_get_args())</code>
      <code>Assert::assertAttributeContains(...\func_get_args())</code>
      <code>Assert::assertAttributeContainsOnly(...\func_get_args())</code>
      <code>Assert::assertAttributeCount(...\func_get_args())</code>
      <code>Assert::assertAttributeEmpty(...\func_get_args())</code>
      <code>Assert::assertAttributeEquals(...\func_get_args())</code>
      <code>Assert::assertAttributeGreaterThan(...\func_get_args())</code>
      <code>Assert::assertAttributeGreaterThanOrEqual(...\func_get_args())</code>
      <code>Assert::assertAttributeInstanceOf(...\func_get_args())</code>
      <code>Assert::assertAttributeInternalType(...\func_get_args())</code>
      <code>Assert::assertAttributeLessThan(...\func_get_args())</code>
      <code>Assert::assertAttributeLessThanOrEqual(...\func_get_args())</code>
      <code>Assert::assertAttributeNotContains(...\func_get_args())</code>
      <code>Assert::assertAttributeNotContainsOnly(...\func_get_args())</code>
      <code>Assert::assertAttributeNotCount(...\func_get_args())</code>
      <code>Assert::assertAttributeNotEmpty(...\func_get_args())</code>
      <code>Assert::assertAttributeNotEquals(...\func_get_args())</code>
      <code>Assert::assertAttributeNotInstanceOf(...\func_get_args())</code>
      <code>Assert::assertAttributeNotInternalType(...\func_get_args())</code>
      <code>Assert::assertAttributeNotSame(...\func_get_args())</code>
      <code>Assert::assertAttributeSame(...\func_get_args())</code>
      <code>Assert::assertInternalType(...\func_get_args())</code>
      <code>Assert::assertNotInternalType(...\func_get_args())</code>
      <code>Assert::attribute(...\func_get_args())</code>
      <code>Assert::attributeEqualTo(...\func_get_args())</code>
      <code>Assert::contains(...\func_get_args())</code>
    </DeprecatedMethod>
    <InternalMethod>
      <code>new ConsecutiveCallsStub($args)</code>
      <code>new ExceptionStub($exception)</code>
      <code>new InvokedAtIndexMatcher($index)</code>
      <code>new InvokedAtLeastCountMatcher(
            $requiredInvocations
        )</code>
      <code>new InvokedAtMostCountMatcher($allowedInvocations)</code>
      <code>new InvokedCountMatcher($count)</code>
      <code>new InvokedCountMatcher(0)</code>
      <code>new InvokedCountMatcher(1)</code>
      <code>new ReturnArgumentStub($argumentIndex)</code>
      <code>new ReturnCallbackStub($callback)</code>
      <code>new ReturnStub($value)</code>
      <code>new ReturnValueMapStub($valueMap)</code>
    </InternalMethod>
    <MissingParamType>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$actual</code>
      <code>$attributeName</code>
      <code>$callback</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$condition</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$haystack</code>
      <code>$haystack</code>
      <code>$key</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$needle</code>
      <code>$prefix</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>Assert::logicalAnd(...\func_get_args())</code>
    </MissingThrowsDocblock>
    <TooManyArguments>
      <code>Assert::anything(...\func_get_args())</code>
      <code>Assert::directoryExists(...\func_get_args())</code>
      <code>Assert::fileExists(...\func_get_args())</code>
      <code>Assert::isEmpty(...\func_get_args())</code>
      <code>Assert::isFalse(...\func_get_args())</code>
      <code>Assert::isFinite(...\func_get_args())</code>
      <code>Assert::isInfinite(...\func_get_args())</code>
      <code>Assert::isJson(...\func_get_args())</code>
      <code>Assert::isNan(...\func_get_args())</code>
      <code>Assert::isNull(...\func_get_args())</code>
      <code>Assert::isReadable(...\func_get_args())</code>
      <code>Assert::isTrue(...\func_get_args())</code>
      <code>Assert::isWritable(...\func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/ArraySubset.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
    <RedundantCondition>
      <code>$other instanceof Traversable</code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/Constraint/Attribute.php">
    <DeprecatedClass>
      <code>Composite</code>
      <code>parent::__construct($constraint)</code>
      <code><![CDATA[parent::evaluate(
            Assert::readAttribute(
                $other,
                $this->attributeName
            ),
            $description,
            $returnResult
        )]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[Assert::readAttribute(
                $other,
                $this->attributeName
            )]]></code>
    </DeprecatedMethod>
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/ClassHasAttribute.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/ClassHasStaticAttribute.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Composite.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/Constraint.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->exporter === null]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/Count.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->getCountOf($other)]]></code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType>
      <code>$other instanceof Traversable</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/Constraint/Exception.php">
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($other)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/ExceptionCode.php">
    <MoreSpecificImplementedParamType>
      <code>$other</code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/Framework/Constraint/ExceptionMessage.php">
    <MoreSpecificImplementedParamType>
      <code>$other</code>
    </MoreSpecificImplementedParamType>
    <RedundantCast>
      <code><![CDATA[(string) $other->getMessage()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/Constraint/ExceptionMessageRegularExpression.php">
    <MoreSpecificImplementedParamType>
      <code>$other</code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/Framework/Constraint/IsAnything.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsEqual.php">
    <MissingParamType>
      <code>$other</code>
      <code>$value</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsIdentical.php">
    <MissingParamType>
      <code>$other</code>
      <code>$value</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsInstanceOf.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->className]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/IsJson.php">
    <PossiblyNullArgument>
      <code>$error</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/Constraint/IsType.php">
    <InvalidReturnType>
      <code>bool</code>
    </InvalidReturnType>
    <RedundantCondition>
      <code>is_string($resource)</code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/Constraint/LogicalAnd.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalNot.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalOr.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalXor.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/ObjectHasAttribute.php">
    <MissingThrowsDocblock>
      <code>hasProperty</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/SameSize.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->getCountOf($expected)]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/Constraint/StringMatchesFormatDescription.php">
    <InvalidArgument>
      <code><![CDATA["--- Expected\n+++ Actual\n"]]></code>
    </InvalidArgument>
    <MissingParamType>
      <code>$text</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[new Differ("--- Expected\n+++ Actual\n")]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/StringStartsWith.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw InvalidArgumentException::create(1, 'non-empty string');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/TraversableContains.php">
    <MissingParamType>
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsEqual.php">
    <MissingParamType>
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsIdentical.php">
    <MissingParamType>
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsOnly.php">
    <MissingParamType>
      <code>$other</code>
    </MissingParamType>
    <MissingReturnType>
      <code>evaluate</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <PropertyNotSetInConstructor>
      <code>DataProviderTestSuite</code>
      <code>DataProviderTestSuite</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/Exception/Exception.php">
    <MissingParamType>
      <code>$code</code>
      <code>$message</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($this)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Exception/ExpectationFailedException.php">
    <PossiblyNullPropertyAssignmentValue>
      <code>$comparisonFailure</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="src/Framework/ExceptionWrapper.php">
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($this)</code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$t->getPrevious()]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/IncompleteTestCase.php">
    <NonInvariantDocblockPropertyType>
      <code>$backupGlobals</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/Framework/MockObject/Builder/Identity.php">
    <MissingReturnType>
      <code>id</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationMocker.php">
    <MissingParamType>
      <code>$arguments</code>
      <code>$id</code>
      <code>$id</code>
      <code>$nextValues</code>
      <code>$value</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>new Rule\ConsecutiveParameters($arguments)</code>
      <code>new Rule\MethodName($constraint)</code>
      <code>new Rule\Parameters($arguments)</code>
      <code>registerMatcher</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationStubber.php">
    <MissingParamType>
      <code>$nextValues</code>
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Builder/ParametersMatch.php">
    <MissingParamType>
      <code>$arguments</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/ConfigurableMethod.php">
    <MissingParamType>
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion>
      <code>$arguments</code>
      <code>$arguments</code>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$interfaceName</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[!is_array($methods) && null !== $methods]]></code>
      <code><![CDATA[!is_array($type) && !is_string($type)]]></code>
    </DocblockTypeContradiction>
    <InvalidReturnStatement>
      <code><![CDATA[$this->getMock(
                $originalClassName,
                $methods,
                $arguments,
                $mockClassName,
                $callOriginalConstructor,
                $callOriginalClone,
                $callAutoload,
                $cloneArguments
            )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
    </InvalidReturnType>
    <InvalidStringClass>
      <code>new $className</code>
    </InvalidStringClass>
    <MissingParamType>
      <code>$type</code>
      <code>$type</code>
    </MissingParamType>
    <MissingReturnType>
      <code>getObject</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code>generateMock</code>
      <code>generateMock</code>
      <code>new Text_Template($filename)</code>
      <code><![CDATA[throw InvalidArgumentException::create(1, 'array or string');]]></code>
      <code><![CDATA[throw InvalidArgumentException::create(2, 'array');]]></code>
      <code><![CDATA[throw new RuntimeException(
                            $e->getMessage(),
                            $e->getCode(),
                            $e
                        );]]></code>
      <code><![CDATA[throw new RuntimeException(
                        $e->getMessage(),
                        $e->getCode(),
                        $e
                    );]]></code>
      <code><![CDATA[throw new RuntimeException(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
      <code><![CDATA[throw new RuntimeException($exception->getMessage());]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$client->__getFunctions()]]></code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code><![CDATA[$isInterface && $class->implementsInterface(Throwable::class)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <MissingClosureReturnType>
      <code>static function ()</code>
    </MissingClosureReturnType>
  </file>
  <file src="src/Framework/MockObject/InvocationHandler.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw $this->deferredError;]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$deferredError</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->deferredError]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->parametersRule === null]]></code>
    </DocblockTypeContradiction>
    <MissingReturnType>
      <code>invoked</code>
    </MissingReturnType>
    <PropertyNotSetInConstructor>
      <code>$methodNameRule</code>
      <code>$parametersRule</code>
      <code>$stub</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->invocationRule !== null]]></code>
      <code><![CDATA[$this->methodNameRule !== null]]></code>
      <code><![CDATA[$this->methodNameRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->stub]]></code>
      <code><![CDATA[$this->stub !== null]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>setMethods</code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code>getClassMethods</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$type</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <MissingThrowsDocblock>
      <code>new Text_Template($filename)</code>
      <code>self::getMethodParametersForCall($method)</code>
      <code><![CDATA[throw new RuntimeException(
                    sprintf(
                        'Cannot mock %s::%s because "parent" return type declaration is used but %s does not have a parent class',
                        $method->getDeclaringClass()->getName(),
                        $method->getName(),
                        $method->getDeclaringClass()->getName()
                    )
                );]]></code>
    </MissingThrowsDocblock>
    <UndefinedMethod>
      <code>getName</code>
    </UndefinedMethod>
  </file>
  <file src="src/Framework/MockObject/MockObject.php">
    <MissingParamType>
      <code>$originalObject</code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Rule/ConsecutiveParameters.php">
    <TypeDoesNotContainNull>
      <code>$invocation === null</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Framework/MockObject/Rule/InvocationOrder.php">
    <MissingReturnType>
      <code>invoked</code>
      <code>invokedDo</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Rule/MethodName.php">
    <MissingThrowsDocblock>
      <code>evaluate</code>
      <code>evaluate</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->invocation === null]]></code>
    </DocblockTypeContradiction>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code>$invocation</code>
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(bool) $this->parameterVerificationResult]]></code>
    </RedundantCastGivenDocblockType>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[isset($this->parameterVerificationResult)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/Framework/MockObject/Stub/ConsecutiveCalls.php">
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnArgument.php">
    <MissingParamType>
      <code>$argumentIndex</code>
    </MissingParamType>
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <MissingParamType>
      <code>$callback</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$callback</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnReference.php">
    <MissingParamType>
      <code>$reference</code>
    </MissingParamType>
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnSelf.php">
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnStub.php">
    <MissingParamType>
      <code>$value</code>
    </MissingParamType>
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnValueMap.php">
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/Stub.php">
    <MissingReturnType>
      <code>invoke</code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/SkippedTestCase.php">
    <NonInvariantDocblockPropertyType>
      <code>$backupGlobals</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <MissingParamType>
      <code>$data</code>
    </MissingParamType>
    <MissingReturnType>
      <code>buildTestWithoutData</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($t)</code>
      <code>Filter::getFilteredStacktrace($t)</code>
      <code><![CDATA[new DataProviderTestSuite(
            $className . '::' . $methodName
        )]]></code>
      <code><![CDATA[throw new Exception('No valid test provided.');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code>$class_name</code>
      <code><![CDATA[$this->expectedException]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[TestUtil::getExpectedException(
                static::class,
                $this->name
            )]]></code>
      <code>setMethods</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->backupStaticAttributes === null]]></code>
      <code><![CDATA[$this->mockObjectGenerator === null]]></code>
      <code><![CDATA[$this->name === null]]></code>
      <code><![CDATA[$this->prophet === null]]></code>
      <code><![CDATA[$this->runClassInSeparateProcess === null]]></code>
      <code><![CDATA[$this->runTestInSeparateProcess === null]]></code>
      <code><![CDATA['']]></code>
      <code><![CDATA[is_int($this->dataName)]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$header</code>
    </InvalidArgument>
    <InvalidCatch>
      <code><![CDATA[try {
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->{$method}();
                }
            }

            $this->setExpectedExceptionFromAnnotation();
            $this->setDoesNotPerformAssertionsFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->{$method}();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            if (!empty($this->warnings)) {
                throw new Warning(
                    implode(
                        "\n",
                        array_unique($this->warnings)
                    )
                );
            }

            $this->status = BaseTestRunner::STATUS_PASSED;
        } catch (IncompleteTest $e) {
            $this->status        = BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (SkippedTest $e) {
            $this->status        = BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (Warning $e) {
            $this->status        = BaseTestRunner::STATUS_WARNING;
            $this->statusMessage = $e->getMessage();
        } catch (AssertionFailedError $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (PredictionException $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Throwable $_e) {
            $e                   = $_e;
            $this->status        = BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $_e->getMessage();
        }]]></code>
      <code><![CDATA[try {
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->{$method}();
                }
            }

            $this->setExpectedExceptionFromAnnotation();
            $this->setDoesNotPerformAssertionsFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->{$method}();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            if (!empty($this->warnings)) {
                throw new Warning(
                    implode(
                        "\n",
                        array_unique($this->warnings)
                    )
                );
            }

            $this->status = BaseTestRunner::STATUS_PASSED;
        } catch (IncompleteTest $e) {
            $this->status        = BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (SkippedTest $e) {
            $this->status        = BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (Warning $e) {
            $this->status        = BaseTestRunner::STATUS_WARNING;
            $this->statusMessage = $e->getMessage();
        } catch (AssertionFailedError $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (PredictionException $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Throwable $_e) {
            $e                   = $_e;
            $this->status        = BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $_e->getMessage();
        }]]></code>
    </InvalidCatch>
    <InvalidReturnStatement>
      <code>$mockObject</code>
      <code><![CDATA[$this->getMockBuilder($originalClassName)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->getMock()]]></code>
      <code><![CDATA[$this->getMockBuilder($originalClassName)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->setMethods(empty($methods) ? null : $methods)
            ->getMock()]]></code>
      <code>get_class($mock)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[class-string<MockObject&RealInstanceType>]]></code>
    </InvalidReturnType>
    <MissingParamType>
      <code>$args</code>
      <code>$args</code>
      <code>$callback</code>
      <code>$result</code>
      <code>$value</code>
    </MissingParamType>
    <MissingReturnType>
      <code>getResult</code>
      <code>runTest</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[TestUtil::getMissingRequirements(
            static::class,
            $this->name
        )]]></code>
      <code>endTest</code>
      <code>endTest</code>
      <code>endTest</code>
      <code>generateClassFromWsdl</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMockForAbstractClass</code>
      <code>getMockForTrait</code>
      <code>getObjectForTrait</code>
      <code>new Differ($header)</code>
      <code><![CDATA[new Text_Template(
                    __DIR__ . '/../Util/PHP/Template/TestCaseClass.tpl'
                )]]></code>
      <code><![CDATA[new Text_Template(
                    __DIR__ . '/../Util/PHP/Template/TestCaseMethod.tpl'
                )]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception('This test uses TestCase::prophesize(), but phpspec/prophecy is not installed. Please run "composer require --dev phpspec/prophecy".');]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullPropertyAssignmentValue>
      <code>$beStrictAboutChangesToGlobalState</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable>
      <code>$categories</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code>$backupStaticAttributes</code>
      <code>$mockObjectGenerator</code>
      <code>$outputBufferingLevel</code>
      <code>$outputExpectedRegex</code>
      <code>$outputExpectedString</code>
      <code>$prophet</code>
      <code>$result</code>
      <code>$runClassInSeparateProcess</code>
      <code>$runTestInSeparateProcess</code>
      <code>$snapshot</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(bool) $this->backupStaticAttributes]]></code>
    </RedundantCastGivenDocblockType>
    <RedundantCondition>
      <code>$this instanceof PhptTestCase</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->outputExpectedRegex !== null]]></code>
      <code><![CDATA[$this->outputExpectedString !== null]]></code>
      <code><![CDATA[$this->prophet !== null]]></code>
      <code>is_string($_originalClassName)</code>
      <code><![CDATA[is_string($this->dataName)]]></code>
      <code><![CDATA[is_string($this->outputExpectedRegex)]]></code>
      <code><![CDATA[is_string($this->outputExpectedString)]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code>$e</code>
      <code>$methodProphecy</code>
      <code>MethodProphecy</code>
      <code>ObjectProphecy</code>
      <code>PredictionException</code>
      <code>PredictionException</code>
      <code>Prophet</code>
      <code>Prophet</code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code><![CDATA[$this->prophet]]></code>
      <code><![CDATA[$this->prophet]]></code>
      <code>\Prophecy\Exception\Doubler\ClassNotFoundException</code>
      <code>\Prophecy\Exception\Doubler\DoubleException</code>
      <code>\Prophecy\Exception\Doubler\InterfaceNotFoundException</code>
      <code>\Prophecy\Prophet</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Framework/TestResult.php">
    <ArgumentTypeCoercion>
      <code>$test</code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code>TestListener</code>
      <code>TestListener</code>
      <code>TestListener[]</code>
      <code>private $listeners = [];</code>
    </DeprecatedInterface>
    <DeprecatedProperty>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
    </DeprecatedProperty>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->topTestSuite === null]]></code>
    </DocblockTypeContradiction>
    <InvalidCatch>
      <code><![CDATA[try {
                $this->codeCoverage->stop(
                    $append,
                    $linesToBeCovered,
                    $linesToBeUsed
                );
            } catch (UnintentionallyCoveredCodeException $cce) {
                $this->addFailure(
                    $test,
                    new UnintentionallyCoveredCodeError(
                        'This test executed code that is not listed as code to be covered or used:' .
                        PHP_EOL . $cce->getMessage()
                    ),
                    $time
                );
            } catch (OriginalCoveredCodeNotExecutedException $cce) {
                $this->addFailure(
                    $test,
                    new CoveredCodeNotExecutedException(
                        'This test did not execute all the code that is listed as code to be covered:' .
                        PHP_EOL . $cce->getMessage()
                    ),
                    $time
                );
            } catch (OriginalMissingCoversAnnotationException $cce) {
                if ($linesToBeCovered !== false) {
                    $this->addFailure(
                        $test,
                        new MissingCoversAnnotationException(
                            'This test does not have a @covers annotation but is expected to have one'
                        ),
                        $time
                    );
                }
            } catch (OriginalCodeCoverageException $cce) {
                $error = true;

                $e = $e ?? $cce;
            }]]></code>
    </InvalidCatch>
    <MissingConstructor>
      <code>$codeCoverage</code>
      <code>$topTestSuite</code>
    </MissingConstructor>
    <MissingThrowsDocblock>
      <code>stop</code>
      <code><![CDATA[throw new Exception(
                        $e->getMessage(),
                        $e->getCode(),
                        $e
                    );]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code>$linesToBeCovered</code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedVariable>
      <code>$_timeout</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$isAnyCoverageRequired</code>
    </PossiblyUndefinedVariable>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->codeCoverage !== null]]></code>
      <code><![CDATA[$this->codeCoverage !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code>$e</code>
      <code>Invoker</code>
      <code>TimeoutException</code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code>addToAssertionCount</code>
      <code>addToAssertionCount</code>
      <code>doesNotPerformAssertions</code>
      <code>doesNotPerformAssertions</code>
      <code>getActualOutput</code>
      <code>getName</code>
      <code>getNumAssertions</code>
      <code>getNumAssertions</code>
      <code>getNumAssertions</code>
      <code>getNumAssertions</code>
      <code>hasOutput</code>
      <code>runBare</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[!is_string($theClass) && !$theClass instanceof ReflectionClass]]></code>
      <code>is_string($testClass)</code>
      <code><![CDATA[null === $this->backupGlobals]]></code>
      <code><![CDATA[null === $this->backupStaticAttributes]]></code>
      <code><![CDATA[null === $this->beStrictAboutChangesToGlobalState]]></code>
    </DocblockTypeContradiction>
    <MissingThrowsDocblock>
      <code>new PhptTestCase($filename)</code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedVariable>
      <code>$afterClassMethod</code>
      <code>$afterClassMethod</code>
      <code>$test</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code>$backupGlobals</code>
      <code>$backupStaticAttributes</code>
      <code>$beStrictAboutChangesToGlobalState</code>
      <code>$iteratorFilter</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->iteratorFilter !== null]]></code>
      <code>is_bool($backupGlobals)</code>
      <code>is_bool($backupStaticAttributes)</code>
      <code>is_bool($beStrictAboutChangesToGlobalState)</code>
      <code><![CDATA[null === $this->backupGlobals && is_bool($backupGlobals)]]></code>
      <code><![CDATA[null === $this->backupStaticAttributes && is_bool($backupStaticAttributes)]]></code>
      <code><![CDATA[null === $this->beStrictAboutChangesToGlobalState && is_bool($beStrictAboutChangesToGlobalState)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/WarningTestCase.php">
    <NonInvariantDocblockPropertyType>
      <code>$backupGlobals</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/Runner/Filter/Factory.php">
    <MissingParamType>
      <code>$args</code>
    </MissingParamType>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingReturnType>
      <code>doAccept</code>
    </MissingReturnType>
    <MissingTemplateParam>
      <code>GroupFilterIterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <MissingTemplateParam>
      <code>NameFilterIterator</code>
    </MissingTemplateParam>
    <PropertyNotSetInConstructor>
      <code>$filterMax</code>
      <code>$filterMin</code>
    </PropertyNotSetInConstructor>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[$accepted && isset($this->filterMax)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/Runner/Hook/TestListenerAdapter.php">
    <DeprecatedInterface>
      <code>TestListenerAdapter</code>
    </DeprecatedInterface>
    <MissingConstructor>
      <code>$lastTestWasNotSuccessful</code>
    </MissingConstructor>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InvalidDocblock>
      <code>private function parseIniSection($content, $ini = []): array</code>
    </InvalidDocblock>
    <MissingParamType>
      <code>$content</code>
      <code>$ini</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>append</code>
      <code><![CDATA[new Text_Template(
            __DIR__ . '/../Util/PHP/Template/PhptTestCase.tpl'
        )]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$sections['FILEEOF']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyNullReference>
      <code>append</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$setting[1]</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code>$sectionOffset</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <MissingClosureParamType>
      <code>$left</code>
      <code>$left</code>
      <code>$left</code>
      <code>$right</code>
      <code>$right</code>
      <code>$right</code>
      <code>$test</code>
    </MissingClosureParamType>
    <PossiblyFalseArgument>
      <code><![CDATA[strpos($test->getName(), '::')]]></code>
    </PossiblyFalseArgument>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$order === self::ORDER_DURATION && $this->cache !== null]]></code>
      <code><![CDATA[$orderDefects === self::ORDER_DEFECTS_FIRST && $this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod>
      <code>getName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/TextUI/Command.php">
    <ArgumentTypeCoercion>
      <code>$printerClass</code>
      <code>$suite</code>
      <code>$suite</code>
      <code>$suite</code>
    </ArgumentTypeCoercion>
    <InvalidDocblock>
      <code>private $warnings = [];</code>
    </InvalidDocblock>
    <LessSpecificReturnStatement>
      <code><![CDATA[$class->newInstance($outputStream)]]></code>
    </LessSpecificReturnStatement>
    <MissingPropertyType>
      <code>$warnings</code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code>doRun</code>
      <code>handleListTests</code>
      <code>handleListTestsXml</code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code>null|Printer|string</code>
    </MoreSpecificReturnType>
    <PossiblyFalseArgument>
      <code><![CDATA[strrpos($this->arguments['test'], '.')]]></code>
    </PossiblyFalseArgument>
    <PossiblyNullArgument>
      <code>$suite</code>
      <code>$suite</code>
      <code>$suite</code>
      <code>$suite</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['argv']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>$testSuite !== null</code>
    </RedundantCondition>
    <UnresolvableInclude>
      <code>require $file</code>
      <code>require $loaderFile</code>
      <code>require $printerFile</code>
    </UnresolvableInclude>
    <UnsafeInstantiation>
      <code>new static</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$option['desc']]]></code>
      <code><![CDATA[$option['desc']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/ResultPrinter.php">
    <DeprecatedInterface>
      <code>ResultPrinter</code>
    </DeprecatedInterface>
    <PropertyNotSetInConstructor>
      <code>$maxColumn</code>
      <code>$numTestsWidth</code>
      <code>ResultPrinter</code>
      <code>ResultPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/TextUI/TestRunner.php">
    <DeprecatedInterface>
      <code><![CDATA[Printer&TestListener]]></code>
    </DeprecatedInterface>
    <DeprecatedMethod>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>flushListeners</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->loader === null]]></code>
      <code><![CDATA[$this->printer === null]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
    </InvalidArgument>
    <InvalidCatch>
      <code><![CDATA[try {
                    $codeCoverage = new CodeCoverage(
                        null,
                        $this->codeCoverageFilter
                    );

                    $codeCoverage->setUnintentionallyCoveredSubclassesWhitelist(
                        [Comparator::class]
                    );

                    $codeCoverage->setCheckForUnintentionallyCoveredCode(
                        $arguments['strictCoverage']
                    );

                    $codeCoverage->setCheckForMissingCoversAnnotation(
                        $arguments['strictCoverage']
                    );

                    if (isset($arguments['forceCoversAnnotation'])) {
                        $codeCoverage->setForceCoversAnnotation(
                            $arguments['forceCoversAnnotation']
                        );
                    }

                    if (isset($arguments['ignoreDeprecatedCodeUnitsFromCodeCoverage'])) {
                        $codeCoverage->setIgnoreDeprecatedCode(
                            $arguments['ignoreDeprecatedCodeUnitsFromCodeCoverage']
                        );
                    }

                    if (isset($arguments['disableCodeCoverageIgnore'])) {
                        $codeCoverage->setDisableIgnoredLines(true);
                    }

                    if (!empty($filterConfiguration['whitelist'])) {
                        $codeCoverage->setAddUncoveredFilesFromWhitelist(
                            $filterConfiguration['whitelist']['addUncoveredFilesFromWhitelist']
                        );

                        $codeCoverage->setProcessUncoveredFilesFromWhitelist(
                            $filterConfiguration['whitelist']['processUncoveredFilesFromWhitelist']
                        );
                    }

                    if (!$this->codeCoverageFilter->hasWhitelist()) {
                        if (!$whitelistFromConfigurationFile && !$whitelistFromOption) {
                            $this->writeMessage('Error', 'No whitelist is configured, no code coverage will be generated.');
                        } else {
                            $this->writeMessage('Error', 'Incorrect whitelist config, no code coverage will be generated.');
                        }

                        $codeCoverageReports = 0;

                        unset($codeCoverage);
                    }
                } catch (CodeCoverageException $e) {
                    $this->writeMessage('Error', $e->getMessage());

                    $codeCoverageReports = 0;
                }]]></code>
      <code><![CDATA[try {
                    $writer = new CloverReport;
                    $writer->process($codeCoverage, $arguments['coverageClover']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new Crap4jReport($arguments['crap4jThreshold']);
                    $writer->process($codeCoverage, $arguments['coverageCrap4J']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new HtmlReport(
                        $arguments['reportLowUpperBound'],
                        $arguments['reportHighLowerBound'],
                        sprintf(
                            ' and <a href="https://phpunit.de/">PHPUnit %s</a>',
                            Version::id()
                        )
                    );

                    $writer->process($codeCoverage, $arguments['coverageHtml']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new PhpReport;
                    $writer->process($codeCoverage, $arguments['coveragePHP']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new XmlReport(Version::id());
                    $writer->process($codeCoverage, $arguments['coverageXml']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
    </InvalidCatch>
    <MissingThrowsDocblock>
      <code>addFilter</code>
      <code>addFilter</code>
      <code>addFilter</code>
      <code>printResult</code>
      <code>process</code>
      <code>process</code>
      <code>process</code>
      <code>process</code>
      <code>reorderTestsInSuite</code>
    </MissingThrowsDocblock>
    <PossiblyNullPropertyAssignmentValue>
      <code>$loader</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
      <code><![CDATA[$arguments['enforceTimeLimit']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code>$whitelistFromConfigurationFile</code>
      <code>$whitelistFromOption</code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code>$printer</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[assert($this->printer instanceof CliTestDoxPrinter)]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->printer !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UnresolvableInclude>
      <code><![CDATA[require_once $extension['file']]]></code>
      <code><![CDATA[require_once $listener['file']]]></code>
    </UnresolvableInclude>
    <UnsafeInstantiation>
      <code><![CDATA[new $class(
            (isset($arguments['stderr']) && $arguments['stderr'] === true) ? 'php://stderr' : null,
            $arguments['verbose'],
            $arguments['colors'],
            $arguments['debug'],
            $arguments['columns'],
            $arguments['reverseList']
        )]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Util/Annotation/DocBlock.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter([
                'setting'            => $recordedSettings,
                'extension_versions' => $extensionVersions,
            ])
        )]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->parsedRequirements = array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter([
                'setting'            => $recordedSettings,
                'extension_versions' => $extensionVersions,
            ])
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array{
     *   __OFFSET: array<string, int>&array{__FILE: string},
     *   setting?: array<string, string>,
     *   extension_versions?: array<string, array{version: string, operator: string}>
     * }&array<
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array<int|string, string>
     * >]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code>throw new SkippedTestError;</code>
    </MissingThrowsDocblock>
    <RedundantCast>
      <code><![CDATA[(string) $matches['value'][$i]]]></code>
    </RedundantCast>
  </file>
  <file src="src/Util/Blacklist.php">
    <DocblockTypeContradiction>
      <code>self::$directories === null</code>
    </DocblockTypeContradiction>
    <UndefinedClass>
      <code>Invoker</code>
    </UndefinedClass>
  </file>
  <file src="src/Util/Configuration.php">
    <ArgumentTypeCoercion>
      <code>$extension</code>
      <code>$listener</code>
      <code>$testSuiteNode</code>
      <code><![CDATA[$testSuiteNodes->item(0)]]></code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference>
      <code>getAttribute</code>
      <code>getAttribute</code>
    </PossiblyNullReference>
    <RedundantCast>
      <code><![CDATA[(string) $argument->textContent]]></code>
      <code><![CDATA[(string) $const->getAttribute('name')]]></code>
      <code><![CDATA[(string) $const->getAttribute('value')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('group')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('prefix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('prefix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('suffix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('suffix')]]></code>
      <code><![CDATA[(string) $directoryNode->textContent]]></code>
      <code><![CDATA[(string) $directoryNode->textContent]]></code>
      <code><![CDATA[(string) $element->getAttribute('class')]]></code>
      <code><![CDATA[(string) $element->getAttribute('file')]]></code>
      <code><![CDATA[(string) $excludeNode->textContent]]></code>
      <code><![CDATA[(string) $file->textContent]]></code>
      <code><![CDATA[(string) $fileNode->textContent]]></code>
      <code><![CDATA[(string) $group->textContent]]></code>
      <code><![CDATA[(string) $group->textContent]]></code>
      <code><![CDATA[(string) $includePath->textContent]]></code>
      <code><![CDATA[(string) $ini->getAttribute('name')]]></code>
      <code><![CDATA[(string) $ini->getAttribute('value')]]></code>
      <code><![CDATA[(string) $log->getAttribute('highLowerBound')]]></code>
      <code><![CDATA[(string) $log->getAttribute('lowUpperBound')]]></code>
      <code><![CDATA[(string) $log->getAttribute('showOnlySummary')]]></code>
      <code><![CDATA[(string) $log->getAttribute('showUncoveredFiles')]]></code>
      <code><![CDATA[(string) $log->getAttribute('target')]]></code>
      <code><![CDATA[(string) $log->getAttribute('threshold')]]></code>
      <code><![CDATA[(string) $log->getAttribute('type')]]></code>
      <code><![CDATA[(string) $node->getAttribute('phpVersion')]]></code>
      <code><![CDATA[(string) $node->getAttribute('phpVersionOperator')]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                    'extensionsDirectory'
                )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'defaultTestSuite'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'printerClass'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'testSuiteLoaderClass'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute('backupGlobals')]]></code>
      <code><![CDATA[(string) $root->getAttribute('backupStaticAttributes')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutChangesToGlobalState')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutCoversAnnotation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutOutputDuringTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutResourceUsageDuringSmallTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutTestsThatDoNotTestAnything')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutTodoAnnotatedTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('bootstrap')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheResult')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheResultFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheTokens')]]></code>
      <code><![CDATA[(string) $root->getAttribute('columns')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertDeprecationsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertErrorsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertNoticesToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertWarningsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('defaultTimeLimit')]]></code>
      <code><![CDATA[(string) $root->getAttribute('disableCodeCoverageIgnore')]]></code>
      <code><![CDATA[(string) $root->getAttribute('enforceTimeLimit')]]></code>
      <code><![CDATA[(string) $root->getAttribute('failOnRisky')]]></code>
      <code><![CDATA[(string) $root->getAttribute('failOnWarning')]]></code>
      <code><![CDATA[(string) $root->getAttribute('forceCoversAnnotation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('ignoreDeprecatedCodeUnitsFromCodeCoverage')]]></code>
      <code><![CDATA[(string) $root->getAttribute('noInteraction')]]></code>
      <code><![CDATA[(string) $root->getAttribute('printerFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('processIsolation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('registerMockObjectsFromTestArgumentsRecursively')]]></code>
      <code><![CDATA[(string) $root->getAttribute('resolveDependencies')]]></code>
      <code><![CDATA[(string) $root->getAttribute('reverseDefectList')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stderr')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnDefect')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnError')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnFailure')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnIncomplete')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnRisky')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnSkipped')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnWarning')]]></code>
      <code><![CDATA[(string) $root->getAttribute('testSuiteLoaderFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('testdox')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForLargeTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForMediumTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForSmallTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('verbose')]]></code>
      <code><![CDATA[(string) $testSuiteNode->getAttribute('name')]]></code>
      <code><![CDATA[(string) $var->getAttribute('name')]]></code>
      <code><![CDATA[(string) $var->getAttribute('value')]]></code>
    </RedundantCast>
    <RedundantConditionGivenDocblockType>
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedMethod>
      <code>getAttribute</code>
      <code>getAttribute</code>
      <code>getAttribute</code>
      <code>getAttribute</code>
      <code>getAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
    </UndefinedMethod>
    <UnsupportedReferenceUsage>
      <code><![CDATA[$target = &$GLOBALS['_' . strtoupper($array)]]]></code>
    </UnsupportedReferenceUsage>
  </file>
  <file src="src/Util/ErrorHandler.php">
    <InvalidArgument>
      <code>static function ($errorNumber, $errorString)
            {
                if ($errorNumber === E_WARNING) {
                    return;
                }

                return false;
            }</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>invokeIgnoringWarnings</code>
    </MissingReturnType>
  </file>
  <file src="src/Util/FileLoader.php">
    <UnresolvableInclude>
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Util/Filter.php">
    <MissingParamType>
      <code>$file</code>
      <code>$frame</code>
      <code>$prefix</code>
    </MissingParamType>
  </file>
  <file src="src/Util/Getopt.php">
    <InvalidOperand>
      <code>$i</code>
      <code>$i</code>
      <code>$i</code>
    </InvalidOperand>
    <PossiblyInvalidArgument>
      <code>$i + 1</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidArrayOffset>
      <code>$long_options[$i + 1]</code>
    </PossiblyInvalidArrayOffset>
    <PossiblyNullArgument>
      <code>$long_options</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Util/GlobalState.php">
    <MissingParamType>
      <code>$variable</code>
    </MissingParamType>
  </file>
  <file src="src/Util/Json.php">
    <MissingParamType>
      <code>$json</code>
    </MissingParamType>
  </file>
  <file src="src/Util/Log/JUnit.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getName()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code>JUnit</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->currentTestCase === null]]></code>
      <code><![CDATA[$this->currentTestCase === null]]></code>
      <code><![CDATA[$this->currentTestCase === null]]></code>
    </DocblockTypeContradiction>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->testSuiteTimes]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingParamType>
      <code>$type</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($t)</code>
      <code>Filter::getFilteredStacktrace($t)</code>
      <code>parent::__construct($out)</code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code>$currentTestCase</code>
      <code>JUnit</code>
      <code>JUnit</code>
    </PropertyNotSetInConstructor>
    <UndefinedInterfaceMethod>
      <code>getName</code>
      <code>getName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/Log/TeamCity.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code>TeamCity</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code>$actualString === null</code>
      <code>$expectedString === null</code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$testName</code>
      <code>$value</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>Filter::getFilteredStacktrace($t)</code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$flowId</code>
      <code>$startedTestName</code>
      <code>TeamCity</code>
      <code>TeamCity</code>
      <code>TeamCity</code>
      <code>TeamCity</code>
    </PropertyNotSetInConstructor>
    <UndefinedInterfaceMethod>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/PHP/AbstractPhpProcess.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->getException($failures[0])]]></code>
      <code><![CDATA[$this->getException($warnings[0])]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code>$exception</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code>$errfile</code>
      <code>$errline</code>
      <code>$errno</code>
      <code>$errstr</code>
    </MissingClosureParamType>
    <MoreSpecificReturnType>
      <code>Exception</code>
    </MoreSpecificReturnType>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($key, "\0")]]></code>
    </PossiblyFalseOperand>
    <PossiblyNullArgument>
      <code><![CDATA[$childResult->getCodeCoverage()]]></code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>merge</code>
    </PossiblyNullReference>
    <UndefinedInterfaceMethod>
      <code>addToAssertionCount</code>
      <code>setResult</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction>
      <code>is_array($envVar)</code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$pipe</code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code>$tempFile</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/PHP/WindowsPhpProcess.php">
    <PropertyNotSetInConstructor>
      <code>WindowsPhpProcess</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/Printer.php">
    <InvalidArgument>
      <code>$out[1]</code>
    </InvalidArgument>
    <InvalidScalarArgument>
      <code>$out[1]</code>
    </InvalidScalarArgument>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$out</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code>$out</code>
      <code>$outTarget</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/Test.php">
    <InvalidScalarArgument>
      <code>array_flip($lineNumbers)</code>
    </InvalidScalarArgument>
    <MissingReturnType>
      <code>sanitizeVersionNumber</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code>forClassName</code>
      <code>forMethod</code>
      <code>forMethod</code>
      <code>forMethod</code>
      <code>requirements</code>
      <code>requirements</code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Util/TestDox/CliTestDoxPrinter.php">
    <DeprecatedInterface>
      <code>CliTestDoxPrinter</code>
    </DeprecatedInterface>
    <InvalidArrayOffset>
      <code>self::SPINNER_ICONS[$id]</code>
      <code>self::SPINNER_ICONS[$id]</code>
    </InvalidArrayOffset>
    <MissingThrowsDocblock>
      <code>\PHPUnit\Util\Filter::getFilteredStacktrace($t)</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArrayOffset>
      <code><![CDATA[$prefix['default']]]></code>
      <code><![CDATA[$prefix['diff']]]></code>
      <code><![CDATA[$prefix['last']]]></code>
      <code><![CDATA[$prefix['message']]]></code>
      <code><![CDATA[$prefix['start']]]></code>
      <code><![CDATA[$prefix['trace']]]></code>
    </PossiblyInvalidArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[self::STATUS_STYLES[$result['status']]['message']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PropertyNotSetInConstructor>
      <code>CliTestDoxPrinter</code>
      <code>CliTestDoxPrinter</code>
      <code>CliTestDoxPrinter</code>
      <code>CliTestDoxPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/HtmlResultPrinter.php">
    <DeprecatedInterface>
      <code>HtmlResultPrinter</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$name</code>
    </MissingParamType>
    <PossiblyNullArgument>
      <code><![CDATA[$this->currentTestClassPrettified]]></code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor>
      <code>HtmlResultPrinter</code>
      <code>HtmlResultPrinter</code>
      <code>HtmlResultPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code>$value</code>
    </InvalidCast>
    <MissingParamType>
      <code>$useColor</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new UtilException(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <RedundantConditionGivenDocblockType>
      <code>is_string($value)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Util/TestDox/ResultPrinter.php">
    <DeprecatedInterface>
      <code>ResultPrinter</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$name</code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code>$testStatus</code>
      <code>ResultPrinter</code>
      <code>ResultPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/TestDoxPrinter.php">
    <DeprecatedInterface>
      <code>TestDoxPrinter</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$numberOfColumns</code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code>\PHPUnit\Util\Filter::getFilteredStacktrace($t)</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>TestDoxPrinter</code>
      <code>TestDoxPrinter</code>
      <code>TestDoxPrinter</code>
      <code>TestDoxPrinter</code>
    </PropertyNotSetInConstructor>
    <UndefinedInterfaceMethod>
      <code>getName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/TestDox/TextResultPrinter.php">
    <DeprecatedInterface>
      <code>TextResultPrinter</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$name</code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code>TextResultPrinter</code>
      <code>TextResultPrinter</code>
      <code>TextResultPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/XmlResultPrinter.php">
    <DeprecatedInterface>
      <code>XmlResultPrinter</code>
    </DeprecatedInterface>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>XmlResultPrinter</code>
      <code>XmlResultPrinter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TextTestListRenderer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getIterator()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <MissingThrowsDocblock>
      <code>ensureOperatorIsValid</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Util/Xml.php">
    <ArgumentTypeCoercion>
      <code>$item</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code>is_string($actual)</code>
    </DocblockTypeContradiction>
    <InvalidStringClass>
      <code>new $className</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code><![CDATA[(new DOMDocument)->importNode($element, true)]]></code>
    </LessSpecificReturnStatement>
    <MissingReturnType>
      <code>xmlToVariable</code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                            $e->getMessage(),
                            $e->getCode(),
                            $e
                        );]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code>DOMElement</code>
    </MoreSpecificReturnType>
    <RedundantCast>
      <code><![CDATA[(string) $entry->getAttribute('key')]]></code>
    </RedundantCast>
  </file>
  <file src="src/Util/XmlTestListRenderer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getIterator()]]></code>
    </ArgumentTypeCoercion>
  </file>
</files>
