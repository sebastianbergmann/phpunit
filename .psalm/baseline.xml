<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.6.0@e784128902dfe01d489c4123d69918a9f3c1eac5">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <UndefinedInterfaceMethod>
      <code>notify</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterLastTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeFirstTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PostConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PreConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/MockObjectFromWsdlCreated.php">
    <PropertyTypeCoercion>
      <code>$methods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/PartialMockObjectCreated.php">
    <PropertyTypeCoercion>
      <code>$methodNames</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion>
      <code>$eventClass . 'Subscriber'</code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference>
      <code>flush</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Event/Value/Runtime/PHP.php">
    <ImpureFunctionCall>
      <code>get_loaded_extensions</code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <ImpureMethodCall>
      <code>fromSecondsAndNanoseconds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Telemetry/MemoryUsage.php">
    <ImpureMethodCall>
      <code>fromBytes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Test/TestCollection.php">
    <PropertyTypeCoercion>
      <code>$tests</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestData/TestDataCollection.php">
    <ArgumentTypeCoercion>
      <code>$data</code>
    </ArgumentTypeCoercion>
    <PropertyTypeCoercion>
      <code>$data</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall>
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteForTestMethodWithDataProvider.php">
    <PropertyTypeCoercion>
      <code>$className</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <TooManyArguments>
      <code>Assert::anything(...func_get_args())</code>
      <code>Assert::directoryExists(...func_get_args())</code>
      <code>Assert::fileExists(...func_get_args())</code>
      <code>Assert::isEmpty(...func_get_args())</code>
      <code>Assert::isFalse(...func_get_args())</code>
      <code>Assert::isFinite(...func_get_args())</code>
      <code>Assert::isInfinite(...func_get_args())</code>
      <code>Assert::isJson(...func_get_args())</code>
      <code>Assert::isList(...func_get_args())</code>
      <code>Assert::isNan(...func_get_args())</code>
      <code>Assert::isNull(...func_get_args())</code>
      <code>Assert::isReadable(...func_get_args())</code>
      <code>Assert::isTrue(...func_get_args())</code>
      <code>Assert::isWritable(...func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Cardinality/Count.php">
    <PossiblyInvalidArgument>
      <code>$e-&gt;getCode()</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Framework/Constraint/ObjectEquals.php">
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Operator/BinaryOperator.php">
    <PropertyTypeCoercion>
      <code>array_map(
            fn ($constraint): Constraint =&gt; $this-&gt;checkConstraint($constraint),
            $constraints
        )</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalXor.php">
    <InvalidArgument>
      <code>bool</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/Constraint/Type/IsInstanceOf.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code>$this-&gt;providedTests</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>list&lt;ExecutionOrderDependency&gt;</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationMocker.php">
    <PropertyTypeCoercion>
      <code>$configurableMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$interfaceName</code>
      <code>$methods</code>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code>$this-&gt;getMock(
                $originalClassName,
                $methods,
                $arguments,
                $mockClassName,
                $callOriginalConstructor,
                $callOriginalClone,
                $callAutoload,
                $cloneArguments
            )</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code>$client-&gt;__getFunctions()</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <InvalidArgument>
      <code>$types</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <InvalidNullableReturnType>
      <code>MethodName</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>$this-&gt;methodNameRule</code>
    </NullableReturnStatement>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
    </InvalidReturnType>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <InvalidArgument>
      <code>[
                'arguments_decl'     =&gt; $this-&gt;argumentsForDeclaration,
                'arguments_call'     =&gt; $this-&gt;argumentsForCall,
                'return_declaration' =&gt; !empty($this-&gt;returnType-&gt;asString()) ? (': ' . $this-&gt;returnType-&gt;asString()) : '',
                'return_type'        =&gt; $this-&gt;returnType-&gt;asString(),
                'arguments_count'    =&gt; !empty($this-&gt;argumentsForCall) ? substr_count($this-&gt;argumentsForCall, ',') + 1 : 0,
                'class_name'         =&gt; $this-&gt;className,
                'method_name'        =&gt; $this-&gt;methodName,
                'modifier'           =&gt; $this-&gt;modifier,
                'reference'          =&gt; $this-&gt;reference,
                'clone_arguments'    =&gt; $this-&gt;cloneArguments ? 'true' : 'false',
                'deprecation'        =&gt; $deprecation,
            ]</code>
    </InvalidArgument>
    <PossiblyFalseOperand>
      <code>strpos($parameterAsString, '&lt;optional&gt; ')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <PropertyNotSetInConstructor>
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <PossiblyInvalidOperand>
      <code>$this-&gt;callback</code>
    </PossiblyInvalidOperand>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <LessSpecificReturnStatement>
      <code>$test</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>Test</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code>$mockClassName</code>
      <code>$originalClassName</code>
      <code>$this-&gt;expectedException</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code>$mockObject</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$outputBufferingLevel</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$backupGlobalsExcludeList</code>
      <code>$groups</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/TestRunner.php">
    <InvalidArgument>
      <code>$var</code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code>bootstrap</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;name</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code>$this-&gt;providedTests</code>
      <code>$this-&gt;requiredTests</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>list&lt;ExecutionOrderDependency&gt;</code>
      <code>list&lt;ExecutionOrderDependency&gt;</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <InvalidPropertyAssignmentValue>
      <code>$this-&gt;testSuiteTimes</code>
    </InvalidPropertyAssignmentValue>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <MissingThrowsDocblock>
      <code>comparisonFailure</code>
      <code>comparisonFailure</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$flowId</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code>$value</code>
    </InvalidCast>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollection.php">
    <PropertyTypeCoercion>
      <code>$testResults</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollector.php">
    <PossiblyNullArgument>
      <code>$this-&gt;status</code>
      <code>$this-&gt;time</code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/DataProvider.php">
    <PossiblyInvalidArgument>
      <code>$e-&gt;getCode()</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition>
      <code>assert($metadata instanceof DependsOnClass)</code>
      <code>assert($metadata instanceof DependsOnMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <LessSpecificReturnStatement>
      <code>array_unique($groups)</code>
      <code>array_unique($groups)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition>
      <code>assert($metadata instanceof RequiresFunction)</code>
      <code>assert($metadata instanceof RequiresMethod)</code>
      <code>assert($metadata instanceof RequiresOperatingSystem)</code>
      <code>assert($metadata instanceof RequiresOperatingSystemFamily)</code>
      <code>assert($metadata instanceof RequiresPhp)</code>
      <code>assert($metadata instanceof RequiresPhpExtension)</code>
      <code>assert($metadata instanceof RequiresPhpunit)</code>
      <code>assert($metadata instanceof RequiresSetting)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/MetadataCollection.php">
    <PropertyTypeCoercion>
      <code>$metadata</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/Annotation/DocBlock.php">
    <MoreSpecificReturnType>
      <code>array{
     *   __OFFSET: array&lt;string, int&gt;&amp;array{__FILE: string},
     *   setting?: array&lt;string, string&gt;,
     *   extension_versions?: array&lt;string, array{version: string, operator: string}&gt;
     * }&amp;array&lt;
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array&lt;int|string, string&gt;
     * &gt;</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$pieces[0]</code>
      <code>$pieces[0]</code>
      <code>explode('::', $value)</code>
      <code>trim($tmp[0])</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Version/Requirement.php">
    <ArgumentTypeCoercion>
      <code>!empty($matches['operator']) ? $matches['operator'] : '&gt;='</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType>
      <code>Driver</code>
      <code>\SebastianBergmann\CodeCoverage\CodeCoverage</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>coverageCacheDirectory</code>
      <code>coverageClover</code>
      <code>coverageCobertura</code>
      <code>coverageCrap4j</code>
      <code>coverageHtml</code>
      <code>coverageHtmlCustomCssFile</code>
      <code>coveragePhp</code>
      <code>coverageText</code>
      <code>coverageText</code>
      <code>coverageXml</code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code>$this-&gt;codeCoverage</code>
      <code>$this-&gt;driver</code>
    </NullableReturnStatement>
    <PossiblyNullReference>
      <code>start</code>
      <code>stop</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingTemplateParam>
      <code>GroupFilterIterator</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$this-&gt;groupTests</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <MissingTemplateParam>
      <code>NameFilterIterator</code>
    </MissingTemplateParam>
    <PossiblyNullArgument>
      <code>$this-&gt;filter</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InternalClass>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalClass>
    <InternalMethod>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code>bootstrap</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code>$sections['FILEEOF']</code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$setting[1]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Runner/TestResult/Collector.php">
    <RedundantCondition>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude>
      <code>include_once $suiteClassFile</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion>
      <code>$tests</code>
      <code>$this-&gt;randomize($suite-&gt;tests())</code>
      <code>$this-&gt;resolveDependencies($tests)</code>
      <code>$this-&gt;reverse($suite-&gt;tests())</code>
      <code>$this-&gt;sortByDuration($suite-&gt;tests())</code>
      <code>$this-&gt;sortBySize($suite-&gt;tests())</code>
      <code>$this-&gt;sortDefectsFirst($suite-&gt;tests())</code>
    </ArgumentTypeCoercion>
    <RedundantCondition>
      <code>$order === self::ORDER_DURATION &amp;&amp; $this-&gt;cache !== null</code>
      <code>$orderDefects === self::ORDER_DEFECTS_FIRST &amp;&amp; $this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Application.php">
    <InternalMethod>
      <code>nameAndVersion</code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code>DefaultPrinter::from(
                    $configuration-&gt;logfileTeamcity()
                )</code>
      <code>DefaultPrinter::from(
                    $configuration-&gt;logfileTeamcity()
                )</code>
      <code>EventFacade::registerTracer(
                new EventLogger(
                    $configuration-&gt;logEventsText(),
                    false
                )
            )</code>
      <code>EventFacade::registerTracer(
                new EventLogger(
                    $configuration-&gt;logEventsVerboseText(),
                    true
                )
            )</code>
      <code>OutputFacade::printerFor($configuration-&gt;logfileJunit())</code>
      <code>OutputFacade::printerFor($configuration-&gt;logfileJunit())</code>
      <code>atLeastVersion</code>
      <code>build</code>
      <code>configurationFile</code>
      <code>listTestsXml</code>
      <code>logEventsText</code>
      <code>logEventsText</code>
      <code>logEventsText</code>
      <code>logEventsVerboseText</code>
      <code>logEventsVerboseText</code>
      <code>logEventsVerboseText</code>
      <code>logfileJunit</code>
      <code>logfileTeamcity</code>
      <code>new JunitXmlLogger(
                OutputFacade::printerFor($configuration-&gt;logfileJunit()),
            )</code>
      <code>new JunitXmlLogger(
                OutputFacade::printerFor($configuration-&gt;logfileJunit()),
            )</code>
      <code>new ResultCacheHandler($cache)</code>
      <code>new ResultCacheHandler($cache)</code>
      <code>new TeamCityLogger(
                DefaultPrinter::from(
                    $configuration-&gt;logfileTeamcity()
                )
            )</code>
      <code>new TeamCityLogger(
                DefaultPrinter::from(
                    $configuration-&gt;logfileTeamcity()
                )
            )</code>
      <code>new TestDoxResultCollector</code>
      <code>new TestDoxResultCollector</code>
    </MissingThrowsDocblock>
    <UnresolvableInclude>
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Configuration/Builder.php">
    <MissingThrowsDocblock>
      <code>Registry::init(
                $cliConfiguration,
                $xmlConfiguration
            )</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Cli/Builder.php">
    <ArgumentTypeCoercion>
      <code>$parameters</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <InvalidNullableReturnType>
      <code>bool</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>$this-&gt;excludeTestSuite</code>
      <code>$this-&gt;teamCityPrinter</code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/Cli/XmlConfigurationFileFinder.php">
    <MissingThrowsDocblock>
      <code>configurationFile</code>
      <code>configurationFile</code>
      <code>configurationFile</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <LessSpecificReturnStatement>
      <code>$this-&gt;testsCovering</code>
      <code>$this-&gt;testsUsing</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>list&lt;string&gt;</code>
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$columns</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <DeprecatedMethod>
      <code>cacheDirectory</code>
      <code>cacheResultFile</code>
      <code>hasCacheDirectory</code>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock>
      <code>detect</code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedArrayOffset>
      <code>$_SERVER['PHP_SELF']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>assert($xmlConfiguration instanceof LoadedFromFileConfiguration)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Configuration/TestSuiteBuilder.php">
    <MissingThrowsDocblock>
      <code>\PHPUnit\Event\TestSuite\TestSuite::fromTestSuite($testSuite)</code>
      <code>cliArgument</code>
      <code>cliArgument</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Value/ConstantCollection.php">
    <PropertyTypeCoercion>
      <code>$constants</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/DirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/ExtensionBootstrapCollection.php">
    <PropertyTypeCoercion>
      <code>$extensionBootstraps</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FileCollection.php">
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FilterDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/GroupCollection.php">
    <PropertyTypeCoercion>
      <code>$groups</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/IniSettingCollection.php">
    <PropertyTypeCoercion>
      <code>$iniSettings</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestFileCollection.php">
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestSuiteCollection.php">
    <PropertyTypeCoercion>
      <code>$testSuites</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/VariableCollection.php">
    <PropertyTypeCoercion>
      <code>$variables</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/CodeCoverage.php">
    <DeprecatedMethod>
      <code>hasCacheDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <ArgumentTypeCoercion>
      <code>$bootstrap-&gt;getAttribute('class')</code>
      <code>$directoryNode-&gt;getAttribute('phpVersionOperator')</code>
      <code>$fileNode-&gt;getAttribute('phpVersionOperator')</code>
    </ArgumentTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCloverToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCrap4jToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageHtmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoveragePhpToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageTextToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageXmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference>
      <code>removeChild</code>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit.php">
    <DeprecatedMethod>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset>
      <code>$option['desc']</code>
      <code>$option['desc']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/Output/Default/ResultPrinter.php">
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Output/Facade.php">
    <InvalidNullableReturnType>
      <code>Printer</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code>DefaultPrinter::standardError()</code>
      <code>DefaultPrinter::standardError()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>new DefaultProgressPrinter(
                self::$printer,
                $configuration-&gt;colors(),
                $configuration-&gt;columns()
            )</code>
      <code>new DefaultProgressPrinter(
                self::$printer,
                $configuration-&gt;colors(),
                $configuration-&gt;columns()
            )</code>
      <code>new TeamCityLogger(DefaultPrinter::standardOutput())</code>
      <code>new TeamCityLogger(DefaultPrinter::standardOutput())</code>
      <code>resourceUsageSinceStartOfRequest</code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code>self::$printer</code>
    </NullableReturnStatement>
    <PossiblyNullArgument>
      <code>self::$printer</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>print</code>
      <code>print</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Output/Printer/DefaultPrinter.php">
    <PossiblyInvalidArgument>
      <code>$this-&gt;stream</code>
      <code>$this-&gt;stream</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction>
      <code>is_array($envVar)</code>
    </DocblockTypeContradiction>
    <RedundantCondition>
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <DocblockTypeContradiction>
      <code>in_array($operator, ['&lt;', 'lt', '&lt;=', 'le', '&gt;', 'gt', '&gt;=', 'ge', '==', '=', 'eq', '!=', '&lt;&gt;', 'ne'], true)</code>
    </DocblockTypeContradiction>
    <NoValue>
      <code>$operator</code>
    </NoValue>
  </file>
</files>
