<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.15.0@5c774aca4746caf3d239d9c8cadb9f882ca29352">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <UndefinedInterfaceMethod>
      <code>notify</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Emitter/DispatchingEmitter.php">
    <ArgumentTypeCoercion>
      <code>$file</code>
      <code>$file</code>
      <code>$file</code>
      <code>$file</code>
      <code>$file</code>
      <code>$file</code>
      <code>$file</code>
      <code>$line</code>
      <code>$line</code>
      <code>$line</code>
      <code>$line</code>
      <code>$line</code>
      <code>$line</code>
      <code>$line</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
    </ArgumentTypeCoercion>
    <TooManyArguments>
      <code>toString</code>
      <code>toString</code>
      <code>toString</code>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterLastTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeFirstTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PostConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PreConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/Lifecycle/DataProviderMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/MockObjectFromWsdlCreated.php">
    <PropertyTypeCoercion>
      <code>$methods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/PartialMockObjectCreated.php">
    <PropertyTypeCoercion>
      <code>$methodNames</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$eventClass . 'Subscriber']]></code>
    </ArgumentTypeCoercion>
    <InvalidArrayOffset>
      <code><![CDATA[gc_status()['running']]]></code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Event/Value/Runtime/PHP.php">
    <ImpureFunctionCall>
      <code>get_loaded_extensions</code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <ImpureMethodCall>
      <code>fromSecondsAndNanoseconds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Telemetry/MemoryUsage.php">
    <ImpureMethodCall>
      <code>fromBytes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Telemetry/Php83GarbageCollectorStatusProvider.php">
    <InvalidArrayOffset>
      <code><![CDATA[$status['application_time']]]></code>
      <code><![CDATA[$status['buffer_size']]]></code>
      <code><![CDATA[$status['collector_time']]]></code>
      <code><![CDATA[$status['destructor_time']]]></code>
      <code><![CDATA[$status['free_time']]]></code>
      <code><![CDATA[$status['full']]]></code>
      <code><![CDATA[$status['protected']]]></code>
      <code><![CDATA[$status['running']]]></code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Event/Value/Test/TestCollection.php">
    <PropertyTypeCoercion>
      <code>$tests</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestData/TestDataCollection.php">
    <ArgumentTypeCoercion>
      <code>$data</code>
    </ArgumentTypeCoercion>
    <PropertyTypeCoercion>
      <code>$data</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall>
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteBuilder.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$methodName</code>
      <code><![CDATA[$testSuite->name()]]></code>
      <code><![CDATA[$testSuite->name()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <DeprecatedMethod>
      <code>Assert::assertStringNotMatchesFormat(...func_get_args())</code>
      <code>Assert::assertStringNotMatchesFormatFile(...func_get_args())</code>
    </DeprecatedMethod>
    <TooManyArguments>
      <code>Assert::anything(...func_get_args())</code>
      <code>Assert::directoryExists(...func_get_args())</code>
      <code>Assert::fileExists(...func_get_args())</code>
      <code>Assert::isEmpty(...func_get_args())</code>
      <code>Assert::isFalse(...func_get_args())</code>
      <code>Assert::isFinite(...func_get_args())</code>
      <code>Assert::isInfinite(...func_get_args())</code>
      <code>Assert::isJson(...func_get_args())</code>
      <code>Assert::isList(...func_get_args())</code>
      <code>Assert::isNan(...func_get_args())</code>
      <code>Assert::isNull(...func_get_args())</code>
      <code>Assert::isReadable(...func_get_args())</code>
      <code>Assert::isTrue(...func_get_args())</code>
      <code>Assert::isWritable(...func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Cardinality/Count.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Framework/Constraint/Cardinality/IsEmpty.php">
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Constraint.php">
    <TooManyArguments>
      <code>toString</code>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Exception/ExceptionMessageMatchesRegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->regularExpression]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Object/ObjectEquals.php">
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Object/ObjectHasProperty.php">
    <MissingThrowsDocblock>
      <code>hasProperty</code>
    </MissingThrowsDocblock>
    <TooManyArguments>
      <code>toString</code>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Operator/BinaryOperator.php">
    <PropertyTypeCoercion>
      <code><![CDATA[array_map(
            fn ($constraint): Constraint => $this->checkConstraint($constraint),
            $constraints,
        )]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalXor.php">
    <InvalidArgument>
      <code>bool</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/Constraint/String/RegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->pattern]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/String/StringContains.php">
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/String/StringMatchesFormatDescription.php">
    <ArgumentTypeCoercion>
      <code>$line</code>
      <code><![CDATA[$this->regularExpressionForFormatDescription(
                $this->convertNewlines($this->formatDescription),
            )]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Traversable/ArrayHasKey.php">
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Traversable/IsList.php">
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Traversable/TraversableContainsOnly.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Type/IsInstanceOf.php">
    <TooManyArguments>
      <code>toString</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$methodName</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->providedTests]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Generator/Generator.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$methods</code>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code><![CDATA[new MockTrait(
                $classTemplate->render(),
                $className['className'],
            )]]></code>
      <code><![CDATA[new MockTrait($classTemplate->render(), $className['className'])]]></code>
      <code>new UnknownTraitException($traitName)</code>
      <code>new UnknownTraitException($traitName)</code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code>mockObjectForAbstractClass</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$client->__getFunctions()]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/MockObject/Generator/MockMethod.php">
    <InvalidArgument>
      <code><![CDATA[[
                'arguments_decl'     => $this->argumentsForDeclaration,
                'arguments_call'     => $this->argumentsForCall,
                'return_declaration' => !empty($this->returnType->asString()) ? (': ' . $this->returnType->asString()) : '',
                'return_type'        => $this->returnType->asString(),
                'arguments_count'    => !empty($this->argumentsForCall) ? substr_count($this->argumentsForCall, ',') + 1 : 0,
                'class_name'         => $this->className,
                'method_name'        => $this->methodName,
                'modifier'           => $this->modifier,
                'reference'          => $this->reference,
                'clone_arguments'    => $this->cloneArguments ? 'true' : 'false',
                'deprecation'        => $deprecation,
                'return_result'      => $returnResult,
            ]]]></code>
    </InvalidArgument>
    <PossiblyFalseOperand>
      <code><![CDATA[strpos($parameterAsString, '<optional> ')]]></code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <DeprecatedMethod>
      <code>mockObjectForAbstractClass</code>
      <code>mockObjectForTrait</code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Framework/MockObject/Runtime/Builder/InvocationMocker.php">
    <PropertyTypeCoercion>
      <code>$configurableMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Runtime/Matcher.php">
    <InvalidNullableReturnType>
      <code>MethodName</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->methodNameRule]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/Framework/MockObject/Runtime/ReturnValueGenerator.php">
    <ArgumentTypeCoercion>
      <code>$returnType</code>
      <code>$types</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[(new ReflectionClass($stubClassName))->newInstanceWithoutConstructor()]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>MockObject</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Runtime/Rule/Parameters.php">
    <PropertyNotSetInConstructor>
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code>$mockClassName</code>
      <code>$originalClassName</code>
      <code><![CDATA[$this->expectedException]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>disableArgumentCloning</code>
      <code>disallowMockingUnknownTypes</code>
      <code>enableProxyingToOriginalMethods</code>
      <code>generateClassFromWsdl</code>
      <code>mockObjectForAbstractClass</code>
      <code>mockObjectForTrait</code>
      <code>objectForTrait</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$outputBufferingLevel</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$backupGlobalsExcludeList</code>
      <code>$groups</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/TestRunner.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$test->output()]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>$var</code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code>bootstrap</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->name]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->providedTests]]></code>
      <code><![CDATA[$this->requiredTests]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->testSuiteTimes]]></code>
    </InvalidPropertyAssignmentValue>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <MissingThrowsDocblock>
      <code>comparisonFailure</code>
      <code>comparisonFailure</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$flowId</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code>$value</code>
    </InvalidCast>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollection.php">
    <PropertyTypeCoercion>
      <code>$testResults</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollector.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->status]]></code>
      <code><![CDATA[$this->time]]></code>
    </PossiblyNullArgument>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->testDoubles]]></code>
    </PropertyTypeCoercion>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/DataProvider.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition>
      <code>assert($metadata instanceof DependsOnClass)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <LessSpecificReturnStatement>
      <code>array_unique($groups)</code>
      <code>array_unique($groups)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<string>]]></code>
    </MoreSpecificReturnType>
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition>
      <code>assert($metadata instanceof RequiresFunction)</code>
      <code>assert($metadata instanceof RequiresMethod)</code>
      <code>assert($metadata instanceof RequiresOperatingSystem)</code>
      <code>assert($metadata instanceof RequiresOperatingSystemFamily)</code>
      <code>assert($metadata instanceof RequiresPhp)</code>
      <code>assert($metadata instanceof RequiresPhpExtension)</code>
      <code>assert($metadata instanceof RequiresPhpunit)</code>
      <code>assert($metadata instanceof RequiresSetting)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <DeprecatedClass>
      <code>IgnoreClassForCodeCoverage</code>
      <code>IgnoreFunctionForCodeCoverage</code>
      <code>IgnoreMethodForCodeCoverage</code>
      <code>new IgnoreClassForCodeCoverage(self::CLASS_LEVEL, $className)</code>
      <code>new IgnoreFunctionForCodeCoverage(self::CLASS_LEVEL, $functionName)</code>
      <code>new IgnoreMethodForCodeCoverage(self::CLASS_LEVEL, $className, $methodName)</code>
    </DeprecatedClass>
  </file>
  <file src="src/Metadata/MetadataCollection.php">
    <PropertyTypeCoercion>
      <code>$metadata</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/Annotation/DocBlock.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ],
            ),
        )]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->parsedRequirements = array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ],
            ),
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array{
     *   __OFFSET: array<string, int>&array{__FILE: string},
     *   setting?: array<string, string>,
     *   extension_versions?: array<string, array{version: string, operator: string}>
     * }&array<
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array<int|string, string>
     * >]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$function</code>
      <code>$function</code>
      <code>$methodName</code>
      <code>$pieces[0]</code>
      <code>$pieces[0]</code>
      <code>$pieces[1]</code>
      <code>$pieces[1]</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code><![CDATA[explode('::', $value)]]></code>
      <code><![CDATA[explode('::', $value)]]></code>
      <code>trim($tmp[0])</code>
      <code>trim($tmp[1])</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/AttributeParser.php">
    <DeprecatedClass>
      <code>IgnoreClassForCodeCoverage::class</code>
      <code>IgnoreFunctionForCodeCoverage::class</code>
      <code>IgnoreMethodForCodeCoverage::class</code>
    </DeprecatedClass>
  </file>
  <file src="src/Metadata/Version/Requirement.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[!empty($matches['operator']) ? $matches['operator'] : '>=']]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Runner/Baseline/RelativePathCalculator.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[array_merge(array_fill(0, $dotsCount, '..'), array_slice($filenameParts, $i))]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<non-empty-string>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType>
      <code>Driver</code>
      <code>\SebastianBergmann\CodeCoverage\CodeCoverage</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationFailed</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>codeCoverageGenerationSucceeded</code>
      <code>coverageCacheDirectory</code>
      <code>coverageClover</code>
      <code>coverageCobertura</code>
      <code>coverageCrap4j</code>
      <code>coverageHtml</code>
      <code>coverageHtmlCustomCssFile</code>
      <code>coveragePhp</code>
      <code>coverageText</code>
      <code>coverageText</code>
      <code>coverageXml</code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code><![CDATA[$this->codeCoverage]]></code>
      <code><![CDATA[$this->driver]]></code>
    </NullableReturnStatement>
    <PossiblyNullReference>
      <code>start</code>
      <code>stop</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Runner/ErrorHandler.php">
    <ArgumentTypeCoercion>
      <code>$errorFile</code>
      <code>$errorLine</code>
      <code>$errorString</code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock>
      <code>Issue::from($file, $line, null, $description)</code>
      <code>Issue::from($file, $line, null, $description)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingTemplateParam>
      <code>GroupFilterIterator</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->groupTests]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
      <code><![CDATA[$this->filter]]></code>
    </ArgumentTypeCoercion>
    <MissingTemplateParam>
      <code>NameFilterIterator</code>
    </MissingTemplateParam>
    <PossiblyNullArgument>
      <code><![CDATA[$this->filter]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Runner/Filter/TestIdFilterIterator.php">
    <MissingTemplateParam>
      <code>TestIdFilterIterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InternalClass>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalClass>
    <InternalMethod>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code>bootstrap</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$sections['FILEEOF']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$setting[1]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Runner/TestResult/Collector.php">
    <RedundantCondition>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude>
      <code>require_once $suiteClassFile</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion>
      <code>$tests</code>
      <code><![CDATA[$this->randomize($suite->tests())]]></code>
      <code><![CDATA[$this->resolveDependencies($tests)]]></code>
      <code><![CDATA[$this->reverse($suite->tests())]]></code>
      <code><![CDATA[$this->sortByDuration($suite->tests())]]></code>
      <code><![CDATA[$this->sortBySize($suite->tests())]]></code>
      <code><![CDATA[$this->sortDefectsFirst($suite->tests())]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Application.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$configuration->generateBaseline()]]></code>
    </ArgumentTypeCoercion>
    <InternalMethod>
      <code>nameAndVersion</code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[DefaultPrinter::from(
                    $configuration->logfileTeamcity(),
                )]]></code>
      <code><![CDATA[DefaultPrinter::from(
                    $configuration->logfileTeamcity(),
                )]]></code>
      <code><![CDATA[OutputFacade::printerFor($configuration->logfileJunit())]]></code>
      <code><![CDATA[OutputFacade::printerFor($configuration->logfileJunit())]]></code>
      <code>atLeastVersion</code>
      <code>build</code>
      <code>configurationFile</code>
      <code>listTestsXml</code>
      <code>logEventsText</code>
      <code>logEventsText</code>
      <code>logEventsText</code>
      <code>logEventsVerboseText</code>
      <code>logEventsVerboseText</code>
      <code>logEventsVerboseText</code>
      <code>logfileJunit</code>
      <code>logfileTeamcity</code>
    </MissingThrowsDocblock>
    <UnresolvableInclude>
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Configuration/Builder.php">
    <MissingThrowsDocblock>
      <code>Registry::init(
                $cliConfiguration,
                $xmlConfiguration,
            )</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Cli/Builder.php">
    <ArgumentTypeCoercion>
      <code>$options[1]</code>
      <code>$parameters</code>
      <code>$testSuffixes</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <DeprecatedMethod>
      <code>hasCacheResultFile</code>
      <code>hasCoverageCacheDirectory</code>
    </DeprecatedMethod>
    <InvalidNullableReturnType>
      <code>bool</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->excludeTestSuite]]></code>
      <code><![CDATA[$this->teamCityPrinter]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/Cli/XmlConfigurationFileFinder.php">
    <MissingThrowsDocblock>
      <code>configurationFile</code>
      <code>configurationFile</code>
      <code>configurationFile</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->testsCovering]]></code>
      <code><![CDATA[$this->testsUsing]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<string>]]></code>
      <code><![CDATA[list<string>]]></code>
    </MoreSpecificReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$columns</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <DeprecatedMethod>
      <code>cacheDirectory</code>
      <code>cacheResultFile</code>
      <code>cacheResultFile</code>
      <code>coverageCacheDirectory</code>
      <code>coverageCacheDirectory</code>
      <code>hasCacheDirectory</code>
      <code>hasCacheResultFile</code>
      <code>hasCacheResultFile</code>
      <code>hasCoverageCacheDirectory</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock>
      <code>baseline</code>
      <code>detect</code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>assert($xmlConfiguration instanceof LoadedFromFileConfiguration)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Configuration/SourceMapper.php">
    <InvalidArgument>
      <code>$files</code>
      <code>$source</code>
      <code>$source</code>
      <code>$source</code>
      <code>$source</code>
    </InvalidArgument>
  </file>
  <file src="src/TextUI/Configuration/TestSuiteBuilder.php">
    <MissingThrowsDocblock>
      <code>\PHPUnit\Event\TestSuite\TestSuiteBuilder::from($testSuite)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Value/ConstantCollection.php">
    <PropertyTypeCoercion>
      <code>$constants</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/DirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/ExtensionBootstrapCollection.php">
    <PropertyTypeCoercion>
      <code>$extensionBootstraps</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FileCollection.php">
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FilterDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/GroupCollection.php">
    <PropertyTypeCoercion>
      <code>$groups</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/IniSettingCollection.php">
    <PropertyTypeCoercion>
      <code>$iniSettings</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestFileCollection.php">
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestSuiteCollection.php">
    <PropertyTypeCoercion>
      <code>$testSuites</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/VariableCollection.php">
    <PropertyTypeCoercion>
      <code>$variables</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/CodeCoverage.php">
    <DeprecatedMethod>
      <code>hasCacheDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$bootstrap->getAttribute('class')]]></code>
      <code><![CDATA[$directoryNode->getAttribute('phpVersionOperator')]]></code>
      <code><![CDATA[$fileNode->getAttribute('phpVersionOperator')]]></code>
    </ArgumentTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCloverToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCrap4jToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageHtmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoveragePhpToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageTextToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageXmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference>
      <code>removeChild</code>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit.php">
    <DeprecatedMethod>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$option['desc']]]></code>
      <code><![CDATA[$option['desc']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/Output/Default/ResultPrinter.php">
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Output/Facade.php">
    <InvalidNullableReturnType>
      <code>Printer</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code>DefaultPrinter::standardError()</code>
      <code>DefaultPrinter::standardError()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code>DefaultPrinter::standardOutput()</code>
      <code><![CDATA[new DefaultProgressPrinter(
            self::$printer,
            EventFacade::instance(),
            $configuration->colors(),
            $configuration->columns(),
            $configuration->source(),
        )]]></code>
      <code><![CDATA[new DefaultProgressPrinter(
            self::$printer,
            EventFacade::instance(),
            $configuration->colors(),
            $configuration->columns(),
            $configuration->source(),
        )]]></code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code>self::$printer</code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Output/Printer/DefaultPrinter.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$this->stream]]></code>
      <code><![CDATA[$this->stream]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/TextUI/TestSuiteFilterProcessor.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$configuration->excludeGroups()]]></code>
      <code><![CDATA[$configuration->filter()]]></code>
      <code><![CDATA[$configuration->groups()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/ExcludeList.php">
    <InvalidPropertyAssignmentValue>
      <code>self::$directories</code>
      <code>self::$directories</code>
      <code>self::$directories</code>
    </InvalidPropertyAssignmentValue>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction>
      <code>is_array($envVar)</code>
    </DocblockTypeContradiction>
    <RedundantCondition>
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <DocblockTypeContradiction>
      <code><![CDATA[in_array($operator, ['<', 'lt', '<=', 'le', '>', 'gt', '>=', 'ge', '==', '=', 'eq', '!=', '<>', 'ne'], true)]]></code>
    </DocblockTypeContradiction>
    <NoValue>
      <code>$operator</code>
    </NoValue>
  </file>
</files>
