<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="4.x-dev@">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <MissingThrowsDocblock occurrences="1">
      <code>map</code>
    </MissingThrowsDocblock>
    <UndefinedInterfaceMethod occurrences="1">
      <code>notify</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Emitter/DispatchingEmitter.php">
    <MissingThrowsDocblock occurrences="51">
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>duration</code>
      <code>duration</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$eventClass . 'Subscriber'</code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference occurrences="1">
      <code>flush</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <MissingThrowsDocblock occurrences="1"/>
  </file>
  <file src="src/Event/Value/Telemetry/SystemStopWatch.php">
    <MissingThrowsDocblock occurrences="1">
      <code>HRTime::fromSecondsAndNanoseconds(...hrtime(false))</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Value/Telemetry/SystemStopWatchWithOffset.php">
    <MissingThrowsDocblock occurrences="1">
      <code>HRTime::fromSecondsAndNanoseconds(...hrtime(false))</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall occurrences="4">
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
    </ImpureMethodCall>
    <MissingThrowsDocblock occurrences="3">
      <code>TestDataCollection::fromArray($testData)</code>
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuite.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$className</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock occurrences="2"/>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteForTestMethodWithDataProvider.php">
    <PropertyTypeCoercion occurrences="1">
      <code>$className</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Throwable.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$t instanceof ExceptionWrapper ? $t-&gt;getClassName() : $t::class</code>
    </ArgumentTypeCoercion>
    <MissingDocblockType occurrences="1">
      <code>public function className(): string</code>
    </MissingDocblockType>
    <MissingThrowsDocblock occurrences="1">
      <code>Filter::getFilteredStacktrace($t)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Assert.php">
    <DeprecatedClass occurrences="12">
      <code>ClassHasAttribute</code>
      <code>ClassHasStaticAttribute</code>
      <code>ObjectHasAttribute</code>
      <code>new ClassHasAttribute($attributeName)</code>
      <code>new ClassHasAttribute($attributeName)</code>
      <code>new ClassHasAttribute($attributeName)</code>
      <code>new ClassHasStaticAttribute($attributeName)</code>
      <code>new ClassHasStaticAttribute($attributeName)</code>
      <code>new ClassHasStaticAttribute($attributeName)</code>
      <code>new ObjectHasAttribute($attributeName)</code>
      <code>new ObjectHasAttribute($attributeName)</code>
      <code>new ObjectHasAttribute($attributeName)</code>
    </DeprecatedClass>
    <MissingThrowsDocblock occurrences="37">
      <code>loadFile</code>
      <code>loadFile</code>
      <code>loadFile</code>
      <code>loadFile</code>
      <code>new IsType($type)</code>
      <code>new IsType(IsType::TYPE_ARRAY)</code>
      <code>new IsType(IsType::TYPE_ARRAY)</code>
      <code>new IsType(IsType::TYPE_BOOL)</code>
      <code>new IsType(IsType::TYPE_BOOL)</code>
      <code>new IsType(IsType::TYPE_CALLABLE)</code>
      <code>new IsType(IsType::TYPE_CALLABLE)</code>
      <code>new IsType(IsType::TYPE_CLOSED_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_CLOSED_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_FLOAT)</code>
      <code>new IsType(IsType::TYPE_FLOAT)</code>
      <code>new IsType(IsType::TYPE_INT)</code>
      <code>new IsType(IsType::TYPE_INT)</code>
      <code>new IsType(IsType::TYPE_ITERABLE)</code>
      <code>new IsType(IsType::TYPE_ITERABLE)</code>
      <code>new IsType(IsType::TYPE_NUMERIC)</code>
      <code>new IsType(IsType::TYPE_NUMERIC)</code>
      <code>new IsType(IsType::TYPE_OBJECT)</code>
      <code>new IsType(IsType::TYPE_OBJECT)</code>
      <code>new IsType(IsType::TYPE_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_RESOURCE)</code>
      <code>new IsType(IsType::TYPE_SCALAR)</code>
      <code>new IsType(IsType::TYPE_SCALAR)</code>
      <code>new IsType(IsType::TYPE_STRING)</code>
      <code>new IsType(IsType::TYPE_STRING)</code>
      <code>new TraversableContainsOnly($className, false)</code>
      <code>new TraversableContainsOnly($type)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
      <code>static::assertThat($haystack, $constraint, $message)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <DeprecatedClass occurrences="3">
      <code>ClassHasAttribute</code>
      <code>ClassHasStaticAttribute</code>
      <code>ObjectHasAttribute</code>
    </DeprecatedClass>
    <DeprecatedMethod occurrences="9">
      <code>Assert::assertClassHasAttribute(...func_get_args())</code>
      <code>Assert::assertClassHasStaticAttribute(...func_get_args())</code>
      <code>Assert::assertClassNotHasAttribute(...func_get_args())</code>
      <code>Assert::assertClassNotHasStaticAttribute(...func_get_args())</code>
      <code>Assert::assertObjectHasAttribute(...func_get_args())</code>
      <code>Assert::assertObjectNotHasAttribute(...func_get_args())</code>
      <code>Assert::classHasAttribute(...func_get_args())</code>
      <code>Assert::classHasStaticAttribute(...func_get_args())</code>
      <code>Assert::objectHasAttribute(...func_get_args())</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock occurrences="3">
      <code>Assert::logicalAnd(...func_get_args())</code>
      <code>Assert::stringEndsWith(...func_get_args())</code>
      <code>Assert::stringStartsWith(...func_get_args())</code>
    </MissingThrowsDocblock>
    <TooManyArguments occurrences="13">
      <code>Assert::anything(...func_get_args())</code>
      <code>Assert::directoryExists(...func_get_args())</code>
      <code>Assert::fileExists(...func_get_args())</code>
      <code>Assert::isEmpty(...func_get_args())</code>
      <code>Assert::isFalse(...func_get_args())</code>
      <code>Assert::isFinite(...func_get_args())</code>
      <code>Assert::isInfinite(...func_get_args())</code>
      <code>Assert::isJson(...func_get_args())</code>
      <code>Assert::isNan(...func_get_args())</code>
      <code>Assert::isNull(...func_get_args())</code>
      <code>Assert::isReadable(...func_get_args())</code>
      <code>Assert::isTrue(...func_get_args())</code>
      <code>Assert::isWritable(...func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Cardinality/Count.php">
    <MissingThrowsDocblock occurrences="1">
      <code>getCountOf</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Cardinality/SameSize.php">
    <MissingThrowsDocblock occurrences="1">
      <code>getCountOf</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Exception/Exception.php">
    <MissingThrowsDocblock occurrences="1">
      <code>Filter::getFilteredStacktrace($other)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Object/ClassHasAttribute.php">
    <MissingThrowsDocblock occurrences="1"/>
  </file>
  <file src="src/Framework/Constraint/Object/ClassHasStaticAttribute.php">
    <DeprecatedClass occurrences="1">
      <code>ClassHasAttribute</code>
    </DeprecatedClass>
    <MissingThrowsDocblock occurrences="1"/>
  </file>
  <file src="src/Framework/Constraint/Object/ObjectHasAttribute.php">
    <DeprecatedClass occurrences="1">
      <code>ClassHasAttribute</code>
    </DeprecatedClass>
  </file>
  <file src="src/Framework/Constraint/Operator/BinaryOperator.php">
    <UnsafeInstantiation occurrences="1">
      <code>new static</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalNot.php">
    <MissingThrowsDocblock occurrences="1">
      <code>evaluate</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/String/StringMatchesFormatDescription.php">
    <MissingThrowsDocblock occurrences="1">
      <code>new Differ(new UnifiedDiffOutputBuilder("--- Expected\n+++ Actual\n"))</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Type/IsInstanceOf.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$this-&gt;className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Exception/Exception.php">
    <MissingParamType occurrences="2">
      <code>$code</code>
      <code>$message</code>
    </MissingParamType>
    <MissingThrowsDocblock occurrences="1">
      <code>Filter::getFilteredStacktrace($this)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Exception/InvalidArgumentException.php">
    <PossiblyUndefinedArrayOffset occurrences="1">
      <code>$stack[1]['class']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Framework/ExceptionWrapper.php">
    <MissingThrowsDocblock occurrences="1">
      <code>Filter::getFilteredStacktrace($this)</code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument occurrences="1">
      <code>$t-&gt;getPrevious()</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$className</code>
      <code>$className</code>
      <code>$interfaceName</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement occurrences="1"/>
    <MoreSpecificReturnType occurrences="1">
      <code>MockObject</code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument occurrences="1">
      <code>$client-&gt;__getFunctions()</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <InvalidNullableReturnType occurrences="1">
      <code>MethodName</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;methodNameRule</code>
    </NullableReturnStatement>
    <RedundantCondition occurrences="1">
      <code>$this-&gt;invocationRule !== null</code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement occurrences="3">
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="3">
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
    </InvalidReturnType>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(string) var_export($parameter-&gt;getDefaultValue(), true)</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <PossiblyInvalidOperand occurrences="1">
      <code>$this-&gt;callback</code>
    </PossiblyInvalidOperand>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$className</code>
    </ArgumentTypeCoercion>
    <InvalidDocblock occurrences="2">
      <code>private function buildDataProviderTestSuite(string $methodName, string $className, array|ErrorTestCase|IncompleteTestCase|SkippedTestCase $data, bool $runTestInSeparateProcess, ?bool $preserveGlobalState, bool $runClassInSeparateProcess, array $backupSettings): DataProviderTestSuite</code>
      <code>private function configureTestCase(TestCase $test, bool $runTestInSeparateProcess, ?bool $preserveGlobalState, bool $runClassInSeparateProcess, array $backupSettings): void</code>
    </InvalidDocblock>
    <InvalidStringClass occurrences="1">
      <code>new $className($methodName)</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement occurrences="1">
      <code>$test</code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock occurrences="3">
      <code>Filter::getFilteredStacktrace($t)</code>
      <code>Filter::getFilteredStacktrace($t)</code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType occurrences="1">
      <code>Test</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$mockClassName</code>
      <code>$originalClassName</code>
      <code>$this-&gt;expectedException</code>
      <code>$this-&gt;size()</code>
    </ArgumentTypeCoercion>
    <InvalidArgument occurrences="1">
      <code>$header</code>
    </InvalidArgument>
    <InvalidReturnStatement occurrences="1">
      <code>$mockObject</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement occurrences="1">
      <code>array_unique($this-&gt;doubledTypes)</code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock occurrences="11">
      <code>generateClassFromWsdl</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMockForAbstractClass</code>
      <code>getMockForTrait</code>
      <code>getObjectForTrait</code>
      <code>new Differ($header)</code>
      <code>onlyMethods</code>
      <code>restoreGlobalState</code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType occurrences="1">
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <PossiblyNullReference occurrences="3">
      <code>passed</code>
      <code>startTest</code>
      <code>startTest</code>
    </PossiblyNullReference>
    <PropertyNotSetInConstructor occurrences="2">
      <code>$name</code>
      <code>$outputBufferingLevel</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion occurrences="1">
      <code>$this-&gt;doubledTypes</code>
    </PropertyTypeCoercion>
    <RedundantCondition occurrences="1">
      <code>$this instanceof PhptTestCase</code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/TestRunner.php">
    <MissingThrowsDocblock occurrences="12">
      <code>CodeCoverage::instance()</code>
      <code>CodeCoverage::instance()</code>
      <code>CodeCoverage::instance()</code>
      <code>CodeCoverage::instance()</code>
      <code>CodeCoverage::start($test)</code>
      <code>GlobalState::getIncludedFilesAsString()</code>
      <code>cacheDirectory</code>
      <code>saveConfigurationForChildProcess</code>
      <code>stop</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$this-&gt;name</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;name</code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock occurrences="1"/>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$event-&gt;testSuite()-&gt;name()</code>
    </ArgumentTypeCoercion>
    <InvalidPropertyAssignmentValue occurrences="1">
      <code>$this-&gt;testSuiteTimes</code>
    </InvalidPropertyAssignmentValue>
    <MissingThrowsDocblock occurrences="3">
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>duration</code>
    </MissingThrowsDocblock>
    <RedundantCondition occurrences="1">
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <MissingThrowsDocblock occurrences="7">
      <code>duration</code>
      <code>duration</code>
      <code>duration</code>
      <code>duration</code>
      <code>duration</code>
      <code>duration</code>
      <code>throwable</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$flowId</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="4">
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/CliTestDoxPrinter.php">
    <MissingThrowsDocblock occurrences="2">
      <code>\PHPUnit\Util\Filter::getFilteredStacktrace($t)</code>
      <code>stop</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArrayOffset occurrences="6">
      <code>$prefix['default']</code>
      <code>$prefix['diff']</code>
      <code>$prefix['last']</code>
      <code>$prefix['message']</code>
      <code>$prefix['start']</code>
      <code>$prefix['trace']</code>
    </PossiblyInvalidArrayOffset>
    <PossiblyUndefinedArrayOffset occurrences="1">
      <code>self::STATUS_STYLES[$result['status']-&gt;asString()]['message']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Logging/TestDox/HtmlResultPrinter.php">
    <PossiblyNullArgument occurrences="1">
      <code>$this-&gt;currentTestClassPrettified</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast occurrences="1">
      <code>$value</code>
    </InvalidCast>
    <MissingThrowsDocblock occurrences="1"/>
    <UndefinedMethod occurrences="2">
      <code>text</code>
      <code>text</code>
    </UndefinedMethod>
  </file>
  <file src="src/Logging/TestDox/ResultPrinter.php">
    <MissingThrowsDocblock occurrences="1">
      <code>parent::__construct($out)</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Logging/TestDox/TestDoxPrinter.php">
    <MissingThrowsDocblock occurrences="1">
      <code>Filter::getFilteredStacktrace($t)</code>
    </MissingThrowsDocblock>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Logging/TestDox/XmlResultPrinter.php">
    <RedundantCondition occurrences="6">
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof CoversClass)</code>
      <code>assert($metadata instanceof CoversFunction)</code>
      <code>assert($metadata instanceof Uses)</code>
      <code>assert($metadata instanceof UsesClass)</code>
      <code>assert($metadata instanceof UsesFunction)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <RedundantCondition occurrences="4">
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
    <UndefinedMethod occurrences="2">
      <code>className</code>
      <code>className</code>
    </UndefinedMethod>
  </file>
  <file src="src/Metadata/Api/DataProvider.php">
    <MissingThrowsDocblock occurrences="1">
      <code>dataProvidedByTestWithAnnotation</code>
    </MissingThrowsDocblock>
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(string) substr($docComment, 0, -1)</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition occurrences="2">
      <code>assert($metadata instanceof DependsOnClass)</code>
      <code>assert($metadata instanceof DependsOnMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <RedundantCondition occurrences="6">
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Group)</code>
      <code>assert($metadata instanceof Metadata)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition occurrences="8">
      <code>assert($metadata instanceof RequiresFunction)</code>
      <code>assert($metadata instanceof RequiresMethod)</code>
      <code>assert($metadata instanceof RequiresOperatingSystem)</code>
      <code>assert($metadata instanceof RequiresOperatingSystemFamily)</code>
      <code>assert($metadata instanceof RequiresPhp)</code>
      <code>assert($metadata instanceof RequiresPhpExtension)</code>
      <code>assert($metadata instanceof RequiresPhpunit)</code>
      <code>assert($metadata instanceof RequiresSetting)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>$className</code>
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/Annotation/DocBlock.php">
    <RedundantCast occurrences="1">
      <code>(string) $matches['value'][$i]</code>
    </RedundantCast>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion occurrences="8">
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$pieces[0]</code>
      <code>$pieces[0]</code>
      <code>explode('::', $value)</code>
      <code>trim($tmp[0])</code>
      <code>trim($tmp[0])</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType occurrences="2">
      <code>Driver</code>
      <code>\SebastianBergmann\CodeCoverage\CodeCoverage</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock occurrences="2">
      <code>forLineAndPathCoverage</code>
      <code>forLineCoverage</code>
    </MissingThrowsDocblock>
    <NullableReturnStatement occurrences="2">
      <code>self::$driver</code>
      <code>self::$instance</code>
    </NullableReturnStatement>
    <PossiblyNullReference occurrences="2">
      <code>start</code>
      <code>stop</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <PossiblyNullArgument occurrences="1">
      <code>$this-&gt;filter</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InternalClass occurrences="2">
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalClass>
    <InternalMethod occurrences="2">
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalMethod>
    <MissingThrowsDocblock occurrences="4">
      <code>append</code>
      <code>cacheDirectory</code>
      <code>stop</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument occurrences="1">
      <code>$sections['FILEEOF']</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Runner/ResultCache/ResultCacheHandler.php">
    <MissingThrowsDocblock occurrences="3">
      <code>duration</code>
      <code>duration</code>
      <code>duration</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude occurrences="1">
      <code>include_once $suiteClassFile</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$tests</code>
    </ArgumentTypeCoercion>
    <RedundantCondition occurrences="4">
      <code>$order === self::ORDER_DURATION &amp;&amp; $this-&gt;cache !== null</code>
      <code>$orderDefects === self::ORDER_DEFECTS_FIRST &amp;&amp; $this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Application.php">
    <MissingThrowsDocblock occurrences="11">
      <code>atLeastVersion</code>
      <code>configuration</code>
      <code>configuration</code>
      <code>configuration</code>
      <code>includePath</code>
      <code>iniSettings</code>
      <code>listTestsXml</code>
      <code>throw new BootstrapException($t);</code>
      <code>throw new InvalidBootstrapException($filename);</code>
      <code>unrecognizedOrderBy</code>
      <code>useDefaultConfiguration</code>
    </MissingThrowsDocblock>
    <PossiblyNullReference occurrences="1">
      <code>extensions</code>
    </PossiblyNullReference>
    <RedundantCondition occurrences="1">
      <code>assert(isset($arguments) &amp;&amp; $arguments instanceof CliConfiguration)</code>
    </RedundantCondition>
    <UnresolvableInclude occurrences="1">
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Command/Commands/ListTestsAsTextCommand.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$this-&gt;suite-&gt;getIterator()</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Command/Commands/ListTestsAsXmlCommand.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$this-&gt;suite-&gt;getIterator()</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Command/Commands/WarmCodeCoverageCacheCommand.php">
    <MissingThrowsDocblock occurrences="2">
      <code>coverageCacheDirectory</code>
      <code>stop</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Cli/Builder.php">
    <MissingThrowsDocblock occurrences="1"/>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <InvalidNullableReturnType occurrences="2">
      <code>bool</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="2">
      <code>$this-&gt;excludeTestSuite</code>
      <code>$this-&gt;teamCityPrinter</code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/CodeCoverageFilterRegistry.php">
    <MissingThrowsDocblock occurrences="1">
      <code>coverageFilter</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <MissingThrowsDocblock occurrences="1">
      <code>throw new FilterNotConfiguredException;</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <DeprecatedMethod occurrences="4">
      <code>cacheDirectory</code>
      <code>cacheResultFile</code>
      <code>hasCacheDirectory</code>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
    <MissingThrowsDocblock occurrences="76">
      <code>backupGlobals</code>
      <code>backupStaticProperties</code>
      <code>beStrictAboutChangesToGlobalState</code>
      <code>bootstrap</code>
      <code>bootstrap</code>
      <code>cacheDirectory</code>
      <code>cacheDirectory</code>
      <code>cacheDirectory</code>
      <code>cacheResult</code>
      <code>cacheResultFile</code>
      <code>cacheResultFile</code>
      <code>clover</code>
      <code>cobertura</code>
      <code>colors</code>
      <code>columns</code>
      <code>coverageCacheDirectory</code>
      <code>coverageClover</code>
      <code>coverageCobertura</code>
      <code>coverageCrap4J</code>
      <code>coverageHtml</code>
      <code>coveragePhp</code>
      <code>coverageText</code>
      <code>coverageXml</code>
      <code>crap4j</code>
      <code>crap4j</code>
      <code>defaultTimeLimit</code>
      <code>disableCodeCoverageIgnore</code>
      <code>disallowTestOutput</code>
      <code>enforceTimeLimit</code>
      <code>excludeGroups</code>
      <code>executionOrder</code>
      <code>executionOrderDefects</code>
      <code>extensionsDirectory</code>
      <code>failOnEmptyTestSuite</code>
      <code>failOnIncomplete</code>
      <code>failOnRisky</code>
      <code>failOnSkipped</code>
      <code>failOnWarning</code>
      <code>filter</code>
      <code>groups</code>
      <code>html</code>
      <code>html</code>
      <code>html</code>
      <code>includePath</code>
      <code>junitLogfile</code>
      <code>noInteraction</code>
      <code>pathCoverage</code>
      <code>php</code>
      <code>plainTextTrace</code>
      <code>processIsolation</code>
      <code>randomOrderSeed</code>
      <code>repeat</code>
      <code>reportUselessTests</code>
      <code>resolveDependencies</code>
      <code>reverseList</code>
      <code>stopOnDefect</code>
      <code>stopOnError</code>
      <code>stopOnFailure</code>
      <code>stopOnIncomplete</code>
      <code>stopOnRisky</code>
      <code>stopOnSkipped</code>
      <code>stopOnWarning</code>
      <code>strictCoverage</code>
      <code>teamcityLogfile</code>
      <code>testdoxExcludeGroups</code>
      <code>testdoxGroups</code>
      <code>testdoxHtmlFile</code>
      <code>testdoxTextFile</code>
      <code>testdoxXmlFile</code>
      <code>testsCovering</code>
      <code>testsUsing</code>
      <code>text</code>
      <code>text</code>
      <code>text</code>
      <code>verbose</code>
      <code>xml</code>
    </MissingThrowsDocblock>
    <RedundantCondition occurrences="1">
      <code>assert($xmlConfiguration instanceof LoadedFromFileConfiguration)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Configuration/TestSuiteBuilder.php">
    <MissingThrowsDocblock occurrences="12">
      <code>addTestFile</code>
      <code>addTestFiles</code>
      <code>argument</code>
      <code>argument</code>
      <code>defaultTestSuite</code>
      <code>map</code>
      <code>new TestSuite</code>
      <code>new TestSuite($path)</code>
      <code>new TestSuite($testClass)</code>
      <code>testSuffixes</code>
      <code>testSuite</code>
      <code>throw new TestFileNotFoundException($cliConfiguration-&gt;argument());</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/CodeCoverage.php">
    <DeprecatedMethod occurrences="1">
      <code>hasCacheDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/Filter/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/FileCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;files</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Group/GroupCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;groups</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <RedundantCast occurrences="31">
      <code>(string) $argument-&gt;textContent</code>
      <code>(string) $const-&gt;getAttribute('name')</code>
      <code>(string) $const-&gt;getAttribute('value')</code>
      <code>(string) $directoryNode-&gt;getAttribute('group')</code>
      <code>(string) $directoryNode-&gt;getAttribute('phpVersion')</code>
      <code>(string) $directoryNode-&gt;getAttribute('phpVersionOperator')</code>
      <code>(string) $directoryNode-&gt;getAttribute('prefix')</code>
      <code>(string) $directoryNode-&gt;getAttribute('prefix')</code>
      <code>(string) $directoryNode-&gt;getAttribute('suffix')</code>
      <code>(string) $directoryNode-&gt;getAttribute('suffix')</code>
      <code>(string) $directoryNode-&gt;textContent</code>
      <code>(string) $directoryNode-&gt;textContent</code>
      <code>(string) $document-&gt;documentElement-&gt;getAttribute('columns')</code>
      <code>(string) $element-&gt;getAttribute($attribute)</code>
      <code>(string) $element-&gt;getAttribute($attribute)</code>
      <code>(string) $element-&gt;getAttribute($attribute)</code>
      <code>(string) $element-&gt;getAttribute('class')</code>
      <code>(string) $element-&gt;getAttribute('file')</code>
      <code>(string) $element-&gt;getAttribute('name')</code>
      <code>(string) $excludeNode-&gt;textContent</code>
      <code>(string) $file-&gt;textContent</code>
      <code>(string) $fileNode-&gt;getAttribute('phpVersion')</code>
      <code>(string) $fileNode-&gt;getAttribute('phpVersionOperator')</code>
      <code>(string) $fileNode-&gt;textContent</code>
      <code>(string) $group-&gt;textContent</code>
      <code>(string) $group-&gt;textContent</code>
      <code>(string) $includePath-&gt;textContent</code>
      <code>(string) $ini-&gt;getAttribute('name')</code>
      <code>(string) $ini-&gt;getAttribute('value')</code>
      <code>(string) $var-&gt;getAttribute('name')</code>
      <code>(string) $var-&gt;getAttribute('value')</code>
    </RedundantCast>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Logging/Logging.php">
    <MissingThrowsDocblock occurrences="6">
      <code>throw new Exception('Logger "JUnit XML" is not configured');</code>
      <code>throw new Exception('Logger "Team City" is not configured');</code>
      <code>throw new Exception('Logger "TestDox HTML" is not configured');</code>
      <code>throw new Exception('Logger "TestDox Text" is not configured');</code>
      <code>throw new Exception('Logger "TestDox XML" is not configured');</code>
      <code>throw new Exception('Logger "Text" is not configured');</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCloverToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCrap4jToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageHtmlToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoveragePhpToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageTextToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageXmlToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference occurrences="1">
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference occurrences="2">
      <code>removeChild</code>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/ConstantCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;constants</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/IniSettingCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;iniSettings</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/Variable.php">
    <MissingParamType occurrences="1">
      <code>$value</code>
    </MissingParamType>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/VariableCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;variables</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/ExtensionCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;extensions</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/PHPUnit.php">
    <DeprecatedMethod occurrences="1">
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestDirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestFileCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;files</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestSuiteCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;testSuites</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/DefaultResultPrinter.php">
    <MissingThrowsDocblock occurrences="2">
      <code>parent::__construct($out)</code>
      <code>stop</code>
    </MissingThrowsDocblock>
    <PossiblyInvalidPropertyAssignmentValue occurrences="1">
      <code>$numberOfColumns</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset occurrences="2">
      <code>$option['desc']</code>
      <code>$option['desc']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/TestRunner.php">
    <DeprecatedMethod occurrences="6">
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>addListener</code>
      <code>flushListeners</code>
    </DeprecatedMethod>
    <InternalMethod occurrences="1">
      <code>nameAndVersion</code>
    </InternalMethod>
    <InvalidArgument occurrences="6">
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
    </InvalidArgument>
    <MissingThrowsDocblock occurrences="38">
      <code>bootstrap</code>
      <code>configurationFile</code>
      <code>configurationFile</code>
      <code>configurationFile</code>
      <code>coverageCacheDirectory</code>
      <code>coverageClover</code>
      <code>coverageCobertura</code>
      <code>coverageCrap4j</code>
      <code>coverageHtml</code>
      <code>coveragePhp</code>
      <code>coverageText</code>
      <code>coverageText</code>
      <code>coverageXml</code>
      <code>detect</code>
      <code>excludeGroups</code>
      <code>filter</code>
      <code>groups</code>
      <code>logfileJunit</code>
      <code>logfileTeamcity</code>
      <code>logfileTestdoxHtml</code>
      <code>logfileTestdoxText</code>
      <code>logfileTestdoxXml</code>
      <code>logfileText</code>
      <code>new ResultCacheHandler($cache)</code>
      <code>new TeamCityLogger('php://stdout')</code>
      <code>pharExtensionDirectory</code>
      <code>plainTextTrace</code>
      <code>plainTextTrace</code>
      <code>plainTextTrace</code>
      <code>run</code>
      <code>stop</code>
      <code>stop</code>
      <code>testsCovering</code>
      <code>testsUsing</code>
      <code>xmlValidationErrors</code>
    </MissingThrowsDocblock>
    <PossiblyNullReference occurrences="3">
      <code>write</code>
      <code>write</code>
      <code>write</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Util/Error/Handler.php">
    <InvalidArgument occurrences="1"/>
  </file>
  <file src="src/Util/ExcludeList.php">
    <InvalidNullableReturnType occurrences="1">
      <code>list&lt;string&gt;</code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock occurrences="1"/>
    <NullableReturnStatement occurrences="1">
      <code>self::$directories</code>
    </NullableReturnStatement>
    <PossiblyNullIterator occurrences="1">
      <code>self::$directories</code>
    </PossiblyNullIterator>
  </file>
  <file src="src/Util/PHP/AbstractPhpProcess.php">
    <ArgumentTypeCoercion occurrences="5">
      <code>$this-&gt;getException($failures[0])</code>
      <code>$this-&gt;getException($notImplemented[0])</code>
      <code>$this-&gt;getException($risky[0])</code>
      <code>$this-&gt;getException($skipped[0])</code>
      <code>$this-&gt;getException($warnings[0])</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement occurrences="1">
      <code>$exception</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType occurrences="4">
      <code>$errfile</code>
      <code>$errline</code>
      <code>$errno</code>
      <code>$errstr</code>
    </MissingClosureParamType>
    <MissingThrowsDocblock occurrences="1">
      <code>CodeCoverage::instance()</code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType occurrences="1">
      <code>Exception</code>
    </MoreSpecificReturnType>
    <PossiblyFalseOperand occurrences="1">
      <code>strrpos($key, "\0")</code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <RedundantCondition occurrences="1">
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull occurrences="1">
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Printer.php">
    <PossiblyInvalidArgument occurrences="2">
      <code>$this-&gt;stream</code>
      <code>$this-&gt;stream</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Util/Variable/VariableExporter.php">
    <InvalidArgument occurrences="1"/>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <MissingThrowsDocblock occurrences="1">
      <code>ensureOperatorIsValid</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Util/Warning.php">
    <RedundantCondition occurrences="1">
      <code>assert($step['object'] instanceof TestCase)</code>
    </RedundantCondition>
  </file>
  <file src="src/Util/Xml.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$item</code>
    </ArgumentTypeCoercion>
    <InvalidStringClass occurrences="1">
      <code>new $className</code>
    </InvalidStringClass>
  </file>
</files>
