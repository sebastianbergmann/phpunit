# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

on:
  - pull_request
  - push

name: CI

jobs:
  coding-guidelines:
    name: Coding Guidelines

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: none, json, phar, tokenizer
          coverage: none
          tools: none

      - name: Run friendsofphp/php-cs-fixer
        run: ./tools/php-cs-fixer fix --dry-run --show-progress=dots --using-cache=no --verbose

  type-checker:
    name: Type Checker

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: none, ctype, curl, date, dom, json, libxml, mbstring, pdo_sqlite, phar, simplexml, soap, tokenizer, xml, xmlwriter, zlib
          coverage: none
          tools: none

      - name: Update dependencies with composer
        run: ./tools/composer update --no-interaction --no-ansi --no-progress

      - name: Run vimeo/psalm on public API
        run: ./tools/psalm --config=.psalm/static-analysis.xml --no-progress --show-info=false

      - name: Run vimeo/psalm on internal code
        run: ./tools/psalm --config=.psalm/config.xml --no-progress --shepherd --show-info=false --stats

  lint-xml-configuration:
    name: Lint XML Configuration

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker image
        uses: ./.docker/lint-xml-configuration

      - name: Lint XML configuration files
        uses: ./.docker/lint-xml-configuration
        with:
          args: bash ./build/scripts/lint-xml-configuration

  tests:
    name: Tests

    runs-on: ${{ matrix.os }}

    env:
      PHP_EXTENSIONS: none, curl, dom, json, libxml, mbstring, openssl, pdo_sqlite, phar, soap, tokenizer, xml, xmlwriter
      PHP_INI_VALUES: assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

        php-version:
          - 7.2
          - 7.3
          - 7.4
          - 8.0
          - 8.1
          - 8.2

        dependencies:
          - lowest
          - highest

    steps:
      - name: Configure git to avoid issues with line endings
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}
          tools: none

      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        if: matrix.dependencies == 'highest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress

      - name: Run sanity check
        run: bash ./build/scripts/sanity-check

      - name: Run tests with phpunit
        run: php ./phpunit

  code-coverage:
    name: Code Coverage

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - 8.0

        dependencies:
          - highest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: pcov
          extensions: none, curl, dom, json, libxml, mbstring, pdo_sqlite, phar, soap, tokenizer, xml, xmlwriter
          ini-values: assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On
          tools: none

      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        if: matrix.dependencies == 'highest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress

      - name: Collect code coverage with phpunit
        run: php ./phpunit --coverage-clover=coverage.xml

      - name: Send code coverage report to Codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-generated-code:
    name: Test generated code

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.2

        dependencies:
          - highest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: pcov
          extensions: none, curl, dom, json, libxml, mbstring, pdo_sqlite, phar, soap, tokenizer, xml, xmlwriter
          ini-values: assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On
          tools: none

      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress

      - name: Generate global assert wrappers
        run: php build/scripts/generate-global-assert-wrappers.php

      - name: Assert that git tree is clean
        run: git diff || echo "Run 'php build/scripts/generate-global-assert-wrappers.php' to regenerate global assert wrappers!"

  build-phar:
    name: Build PHAR

    runs-on: ubuntu-latest

    env:
      PHP_EXTENSIONS: none, dom, json, fileinfo, iconv, libxml, mbstring, pdo_sqlite, phar, soap, tokenizer, xml, xmlwriter
      PHP_INI_VALUES: assert.exception=1, phar.readonly=0, zend.assertions=1

    strategy:
      matrix:
        php-version:
          - "8.1"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}
          tools: none

      - name: Install java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      - name: Build PHAR
        run: ant phar-snapshot

      - name: Upload PHAR
        uses: actions/upload-artifact@v3
        with:
          name: phpunit-snapshot-phar
          path: ./build/artifacts/phpunit-snapshot.phar
          retention-days: 7

  test-phar:
    name: Test PHAR

    needs:
      - build-phar

    runs-on: ubuntu-latest

    env:
      PHP_EXTENSIONS: none, curl, dom, json, fileinfo, iconv, libxml, mbstring, pdo_sqlite, phar, soap, tokenizer, xml, xmlwriter
      PHP_INI_VALUES: assert.exception=1, phar.readonly=0, zend.assertions=1

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.2"
          - "7.3"
          - "7.4"
          - "8.0"
          - "8.1"
          - "8.2"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}
          tools: none

      - name: Install java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      - name: Download PHAR
        uses: actions/download-artifact@v3
        with:
          name: phpunit-snapshot-phar
          path: ./build/artifacts/

      - name: Make PHAR executable
        run: chmod +x ./build/artifacts/phpunit-snapshot.phar

      - name: Run PHAR-specific tests
        run: ant run-phar-specific-tests
